@charset "UTF-8";
/* source-sans-pro-regular - latin */
@font-face {
  font-family: 'Source Sans Pro';
  font-style: normal;
  font-weight: 400;
  src: url("/fonts/source-sans-pro-v9-latin/source-sans-pro-v9-latin-regular.eot");
  /* IE9 Compat Modes */
  src: local("Source Sans Pro"), local("SourceSansPro-Regular"), url("/fonts/source-sans-pro-v9-latin/source-sans-pro-v9-latin-regular.eot?#iefix") format("embedded-opentype"), url("/fonts/source-sans-pro-v9-latin/source-sans-pro-v9-latin-regular.woff2") format("woff2"), url("/fonts/source-sans-pro-v9-latin/source-sans-pro-v9-latin-regular.woff") format("woff"), url("/fonts/source-sans-pro-v9-latin/source-sans-pro-v9-latin-regular.ttf") format("truetype"), url("/fonts/source-sans-pro-v9-latin/source-sans-pro-v9-latin-regular.svg#SourceSansPro") format("svg");
  /* Legacy iOS */ }
/* source-sans-pro-700 - latin */
@font-face {
  font-family: 'Source Sans Pro';
  font-style: normal;
  font-weight: 700;
  src: url("/fonts/source-sans-pro-v9-latin/source-sans-pro-v9-latin-700.eot");
  /* IE9 Compat Modes */
  src: local("Source Sans Pro Bold"), local("SourceSansPro-Bold"), url("/fonts/source-sans-pro-v9-latin/source-sans-pro-v9-latin-700.eot?#iefix") format("embedded-opentype"), url("/fonts/source-sans-pro-v9-latin/source-sans-pro-v9-latin-700.woff2") format("woff2"), url("/fonts/source-sans-pro-v9-latin/source-sans-pro-v9-latin-700.woff") format("woff"), url("/fonts/source-sans-pro-v9-latin/source-sans-pro-v9-latin-700.ttf") format("truetype"), url("/fonts/source-sans-pro-v9-latin/source-sans-pro-v9-latin-700.svg#SourceSansPro") format("svg");
  /* Legacy iOS */ }
/*------------------------------------*\
    VARS.SCSS
\*------------------------------------*/
/**
 * Any variables you find set in inuit.css’ `_vars.scss` that you do not wish to
 * keep, simply redefine here. This means that if inuit.css, for example, sets
 * your `$base-font-size` at 16px and you wish it to be 14px, simply redeclare
 * that variable in this file. inuit.css ignores its own variables in favour of
 * using your own, so you can completely modify how inuit.css works without ever
 * having to alter the framework itself.
 */
/*------------------------------------*\
    $OBJECTS-AND-ABSTRACTIONS
\*------------------------------------*/
/**
 * All of inuit.css’ objects and abstractions are initially turned off by
 * default. This means that you start any project with as little as possible,
 * and introducing objects and abstractions is as simple as switching the
 * following variables to `true`.
 */
/*------------------------------------*\
    $OVERRIDES
\*------------------------------------*/
/**
 * Place any variables that should override inuit.css’ defaults here.
 */
/*------------------------------------*\
    $CUSTOM
\*------------------------------------*/
/**
 * Place any of your own variables that sit on top of inuit.css here.
 */
/*------------------------------------*\
    $DEFAULTS
\*------------------------------------*/
/**
 * inuit.css’ default variables. Redefine these in your `_vars.scss` file (found
 * in the inuit.css-web-template) to override them.
 */
/*------------------------------------*\
    $DEBUG
\*------------------------------------*/
/**
 * Debug mode will visually highlight any potential markup/accessibility quirks
 * in the browser. Set to `true` or `false`.
 */
/*------------------------------------*\
    $BORDER-BOX
\*------------------------------------*/
/**
 * Do you want all elements to adopt `box-sizing:border-box;` as per
 * paulirish.com/2012/box-sizing-border-box-ftw ?
 */
/*------------------------------------*\
    $BASE
\*------------------------------------*/
/**
 * Base stuff
 */
/**
 * Base font-family.
 */
/**
 * Default colour for objects’ borders etc.
 */
/*------------------------------------*\
    $RESPONSIVE
\*------------------------------------*/
/**
 * Responsiveness?
 */
/**
 * Responsiveness for widescreen/high resolution desktop monitors and beyond?
 * Note: `$responsive` variable above must be set to true before enabling this.
 */
/**
 * Responsive push and pull produce a LOT of code, only turn them on if you
 * definitely need them.
 */
/**
 * Note: `$push` variable above must be set to true before enabling these.
 */
/**
 * Note: `$pull` variable above must be set to true before enabling these.
 */
/**
 * Tell inuit.css when breakpoints start.
 */
/*------------------------------------*\
    $FONT-SIZES
\*------------------------------------*/
/**
 * Font-sizes (in pixels). Refer to relevant sections for their implementations.
 */
/*------------------------------------*\
    $QUOTES
\*------------------------------------*/
/**
 * English quote marks?
 */
/**
 * If you want English quotes then please do not edit these; they’re only here
 * because Sass needs them.
 */
/**
 * If you need non-English quotes, please alter the following values accordingly:
 */
/*------------------------------------*\
    $BRAND
\*------------------------------------*/
/**
 * Brand stuff
 */
/**
 * How big would you like round corners to be by default?
 */
/*------------------------------------*\
    $OBJECTS AND ABSTRACTIONS
\*------------------------------------*/
/**
 * Which objects and abstractions would you like to use?
 */
/*------------------------------------*\
    $FRAMEWORK
\*------------------------------------*/
/**
 * inuit.css will work these next ones out for use within the framework.
 *
 * Assign our `$base-line-height` to a new spacing var for more transparency.
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
/**
 * Style any number of headings in one fell swoop, e.g.:
 *
   .foo{
       @include headings(1, 3){
           color:#BADA55;
       }
    }
 *
 * With thanks to @lar_zzz, @paranoida, @rowanmanning and ultimately
 * @thierrylemoulec for refining and improving my initial mixin.
 */
/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 *
   .foo{
       @include vendor(animation, shrink 3s);
   }

   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 *
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
/**
 * Force overly long spans of text to truncate, e.g.:
 *
   `@include truncate(100%);`
 *
 * Where `$truncation-boundary` is a united measurement.
 */
/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 *
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 *
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 *
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 *
 * `@include arrow(top, left, red)`
 *
 * for just a single, red arrow, or:
 *
 * `@include arrow(bottom, center, red, black)`
 *
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus:
 *
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       @include arrow(top, left, #BADA55, #ACE);
   }
 *
 */
/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * lap-and-up
 * portable
 * desk
 * desk-wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */
/*! normalize.css v2.1.0 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/*
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/*
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block; }

/*
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/*
 * Address styling not present in IE 8/9.
 */
[hidden] {
  display: none; }

/* ==========================================================================
   Base
   ========================================================================== */
/*
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 2 */ }

/*
 * Remove default margin.
 */
body {
  margin: 0; }

/* ==========================================================================
   Links
   ========================================================================== */
/*
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted; }

/*
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* ==========================================================================
   Typography
   ========================================================================== */
/*
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/*
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/*
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/*
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic; }

/*
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

/*
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/*
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em; }

/*
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap; }

/*
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019"; }

/*
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/*
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* ==========================================================================
   Embedded content
   ========================================================================== */
/*
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0; }

/*
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden; }

/* ==========================================================================
   Figures
   ========================================================================== */
/*
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0; }

/* ==========================================================================
   Forms
   ========================================================================== */
/*
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/*
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/*
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */ }

/*
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal; }

/*
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none; }

/*
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/*
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/*
 * 1. Address box sizing set to `content-box` in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/*
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/*
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/*
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/*
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */ }

/* ==========================================================================
   Tables
   ========================================================================== */
/*
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

/*------------------------------------*\
    $RESET
\*------------------------------------*/
/**
 * A more considered reset; more of a restart...
 * As per: csswizardry.com/2011/10/reset-restarted
 */
/**
* Let’s make the box model all nice, shall we...?
*/
*, *:before, *:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box; }

/**
 * The usual...
 */
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
table, th, td, caption,
hr {
  margin: 0;
  padding: 0; }

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title], dfn[title] {
  cursor: help; }

/**
 * Remove underlines from potentially troublesome elements.
 */
u, ins {
  text-decoration: none; }

/**
 * Apply faux underline via `border-bottom`.
 */
ins {
  border-bottom: 1px solid; }

/**
 * So that `alt` text is visually offset if images don’t load.
 */
img {
  font-style: italic; }

/**
 * Give form elements some cursor interactions...
 */
label,
input,
textarea,
button,
select,
option {
  cursor: pointer; }

.text-input:active,
.text-input:focus,
textarea:active,
textarea:focus {
  cursor: text;
  outline: none; }

/*------------------------------------*\
    $CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the clearfix class with Sass to avoid the `.cf` class appearing over
 * and over in your markup.
 */
.cf:after, .nav:after, .header--nav:after, .footer--links:after, .island:after,
.islet:after, .matrix:after, .multi-list:after {
  content: "";
  display: table;
  clear: both; }

/*------------------------------------*\
    $SHARED
\*------------------------------------*/
/**
 * Where `margin-bottom` is concerned, this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */
/**
 * Base elements
 */
h1, h2, h3, h4, h5, h6, hgroup, ul, ol, dl, blockquote, p, address, table, fieldset, figure, pre, .media, .island, .islet {
  margin-bottom: 24px;
  margin-bottom: 1.5rem; }
  .islet h1, .islet h2, .islet h3, .islet h4, .islet h5, .islet h6, .islet hgroup,
  .islet ul,
  .islet ol,
  .islet dl,
  .islet blockquote,
  .islet p,
  .islet address,
  .islet table,
  .islet fieldset,
  .islet figure,
  .islet pre,
  .islet .media,
  .islet .island,
  .islet .islet {
    margin-bottom: 12px;
    margin-bottom: 0.75rem; }

/**
 * Doubled up `margin-bottom` helper class.
 */
.landmark {
  margin-bottom: 48px;
  margin-bottom: 3rem; }

/**
 * `hr` elements only take up a few pixels, so we need to give them special
 * treatment regarding vertical rhythm.
 */
hr {
  margin-bottom: 22px;
  margin-bottom: 1.375rem; }

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once, here.
 */
ul, ol, dd {
  margin-left: 48px;
  margin-left: 3rem; }

/*------------------------------------*\
    $MAIN
\*------------------------------------*/
html {
  font: 1em/1.5 "Source Sans Pro", "Helvetica Neue", Helvetica, Arial, sans-serif;
  overflow-y: scroll;
  min-height: 100%; }

/*------------------------------------*\
    $HEADINGS
\*------------------------------------*/
/**
 * As per: csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css
 *
 * When we define a heading we also define a corresponding class to go with it.
 * This allows us to apply, say, `class=alpha` to a `h3`; a double-stranded
 * heading hierarchy.
 */
h1, .alpha {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.3333333333; }

h2, .beta {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6; }

h3, .gamma, .header--tagline, .posts--title {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1; }

h4, .delta {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

h5, .epsilon {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }

h6, .zeta {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.7142857143; }

/**
 * Heading groups and generic any-heading class.
 * To target any heading of any level simply apply a class of `.hN`, e.g.:
 *
   <hgroup>
       <h1 class=hN>inuit.css</h1>
       <h2 class=hN>Best. Framework. Ever!</h2>
   </hgroup>
 *
 */
hgroup .hN {
  margin-bottom: 0; }

/**
 * A series of classes for setting massive type; for use in heroes, mastheads,
 * promos, etc.
 */
.giga {
  font-size: 96px;
  font-size: 6rem;
  line-height: 1; }

.mega {
  font-size: 72px;
  font-size: 4.5rem;
  line-height: 1; }

.kilo {
  font-size: 48px;
  font-size: 3rem;
  line-height: 1; }

/*------------------------------------*\
    $PARAGRAPHS
\*------------------------------------*/
/**
 * The `.lede` class is used to make the introductory text (usually a paragraph)
 * of a document slightly larger.
 */
.lede,
.lead {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.3333333333; }

/*------------------------------------*\
    $SMALLPRINT
\*------------------------------------*/
/**
 * A series of classes for setting tiny type; for use in smallprint etc.
 */
.smallprint,
.milli {
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 2; }

.micro {
  font-size: 10px;
  font-size: 0.625rem;
  line-height: 2.4; }

/*------------------------------------*\
    $CODE
\*------------------------------------*/
/**
 * Use an explicit font stack to ensure browsers render correct `line-height`.
 */
pre {
  overflow: auto; }

pre mark {
  background: none;
  border-bottom: 1px solid;
  color: inherit; }

/**
 * Add comments to your code examples, e.g.:
 *
   <code>&lt;/div&gt;<span class=code-comment>&lt;!-- /wrapper --&gt;</span></code>
 *
 */
.code-comment {
  /**
   * Override this setting in your theme stylesheet
   */
  opacity: 0.75;
  filter: alpha(opacity=75); }

/**
 * You can add line numbers to your code examples but be warned, it requires
 * some pretty funky looking markup, e.g.:
 *
   <ol class=line-numbers>
       <li><code>.nav{</code></li>
       <li><code>    list-style:none;</code></li>
       <li><code>    margin-left:0;</code></li>
       <li><code>}</code></li>
       <li><code>    .nav > li,</code></li>
       <li><code>        .nav > li > a{</code></li>
       <li><code>            display:inline-block;</code></li>
       <li><code>           *display:inline-block;</code></li>
       <li><code>            zoom:1;</code></li>
       <li><code>        }</code></li>
   </ol>
 *
 * 1. Make the list look like code.
 * 2. Give the list flush numbers with a leading zero.
 * 3. Make sure lines of code don’t wrap.
 * 4. Give the code form by forcing the `code` to honour white-space.
 */
.line-numbers {
  font-family: monospace, serif;
  /* [1] */
  list-style: decimal-leading-zero inside;
  /* [2] */
  white-space: nowrap;
  /* [3] */
  overflow: auto;
  /* [3] */
  margin-left: 0; }

.line-numbers code {
  white-space: pre;
  /* [4] */ }

/*------------------------------------*\
    $IMAGES
\*------------------------------------*/
/**
 * Demo: jsfiddle.net/inuitcss/yMtur
 */
/**
 * Fluid images.
 */
img {
  max-width: 100%; }

/**
 * Non-fluid images if you specify `width` and/or `height` attributes.
 */
img[width],
img[height] {
  max-width: none; }

/**
 * Rounded images.
 */
.img--round {
  border-radius: 4px; }

/**
 * Image placement variations.
 */
.img--right {
  float: right;
  margin-bottom: 24px;
  margin-left: 24px; }

.img--left {
  float: left;
  margin-right: 24px;
  margin-bottom: 24px; }

.img--center {
  display: block;
  margin-right: auto;
  margin-bottom: 24px;
  margin-left: auto; }

/**
 * Keep your images on your baseline.
 *
 * Please note, these will not work too nicely with fluid images and will
 * distort when resized below a certain width. Use with caution.
 */
.img--short {
  height: 120px; }

.img--medium {
  height: 240px; }

.img--tall {
  height: 360px; }

/**
 * Images in `figure` elements.
 */
figure > img {
  display: block; }

/*------------------------------------*\
    $LISTS
\*------------------------------------*/
/**
 * Remove vertical spacing from nested lists.
 */
li > ul,
li > ol {
  margin-bottom: 0; }

/**
 * Have a numbered `ul` without the semantics implied by using an `ol`.
 */
/*ul*/
.numbered-list {
  list-style-type: decimal; }

/*------------------------------------*\
    $GRIDS
\*------------------------------------*/
/**
 * Fluid and nestable grid system, e.g.:
 *
   <div class="grid">

       <div class="grid__item  one-third">
           <p>One third grid</p>
       </div><!--

    --><div class="grid__item  two-thirds">
           <p>Two thirds grid</p>
       </div><!--

    --><div class="grid__item  one-half">
           <p>One half grid</p>
       </div><!--

    --><div class="grid__item  one-quarter">
           <p>One quarter grid</p>
       </div><!--

    --><div class="grid__item  one-quarter">
           <p>One quarter grid</p>
       </div>

   </div>
 *
 * Demo: jsfiddle.net/inuitcss/CLYUC
 *
 */
/**
 * Grid wrapper
 */
.grid {
  margin-left: -24px;
  list-style: none;
  margin-bottom: 0; }

/**
 * Very infrequently occuring grid wrappers as children of grid wrappers.
 */
.grid > .grid {
  margin-left: 0; }

/**
 * Grid
 */
.grid__item {
  display: inline-block;
  width: 100%;
  padding-left: 24px;
  vertical-align: top; }

/*------------------------------------*\
    $NAV
\*------------------------------------*/
/**
 * Nav abstraction as per: csswizardry.com/2011/09/the-nav-abstraction
 * When used on an `ol` or `ul`, this class throws the list into horizontal mode
 * e.g.:
 *
   <ul class=nav>
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 * Demo: jsfiddle.net/inuitcss/Vnph4
 *
 */
.nav, .header--nav, .footer--links {
  list-style: none;
  margin-left: 0; }
  .nav > li, .header--nav > li, .footer--links > li,
  .nav > li > a,
  .header--nav > li > a,
  .footer--links > li > a {
    display: inline-block;
    *display: inline;
    zoom: 1; }

/**
 * `.nav--stacked` extends `.nav` and throws the list into vertical mode, e.g.:
 *
   <ul class="nav  nav--stacked">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--stacked > li {
  display: list-item; }
  .nav--stacked > li > a {
    display: block; }

/**
 * `.nav--banner` extends `.nav` and centres the list, e.g.:
 *
   <ul class="nav  nav--banner">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--banner, .header--nav, .footer--links {
  text-align: center; }

/**
 * Give nav links a big, blocky hit area. Extends `.nav`, e.g.:
 *
   <ul class="nav  nav--block">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--block {
  line-height: 1;
  /**
   * Remove whitespace caused by `inline-block`.
   */
  letter-spacing: -0.31em;
  word-spacing: -0.43em;
  white-space: nowrap; }
  .nav--block > li {
    letter-spacing: normal;
    word-spacing: normal; }
    .nav--block > li > a {
      padding: 12px; }

/**
 * Force a nav to occupy 100% of the available width of its parent. Extends
 * `.nav`, e.g.:
 *
   <ul class="nav  nav--fit">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 * Thanks to @pimpl for this idea!
 */
.nav--fit {
  display: table;
  width: 100%; }
  .nav--fit > li {
    display: table-cell; }
    .nav--fit > li > a {
      display: block; }

/**
 * Make a list of keywords. Extends `.nav`, e.g.:
 *
   `<ul class="nav  nav--keywords>`
 *
 */
.nav--keywords > li:after {
  content: "\002C" "\00A0"; }
.nav--keywords > li:last-child:after {
  display: none; }

/*------------------------------------*\
    $ISLAND
\*------------------------------------*/
/**
 * Simple, boxed off content, as per: csswizardry.com/2011/10/the-island-object
 * E.g.:
 *
   <div class=island>
       I am boxed off.
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/u8pV3
 *
 */
.island,
.islet {
  display: block; }

.island {
  padding: 24px; }

.island > :last-child,
.islet > :last-child {
  margin-bottom: 0; }

/**
 * Just like `.island`, only smaller.
 */
.islet {
  padding: 12px; }

/*------------------------------------*\
    $BLOCK-LIST
\*------------------------------------*/
/**
 * Create big blocky lists of content, e.g.:
 *
   <ul class=block-list>
      <li>Foo</li>
      <li>Bar</li>
      <li>Baz</li>
      <li><a href=# class=block-list__link>Foo Bar Baz</a></li>
   </ul>
 *
 * Extend this object in your theme stylesheet.
 *
 * Demo: jsfiddle.net/inuitcss/hR57q
 *
 */
.block-list, .matrix, .posts--list,
.block-list > li,
.matrix > li,
.posts--list > li {
  border: 0 solid #ccc; }

.block-list, .matrix, .posts--list {
  list-style: none;
  margin-left: 0;
  border-top-width: 1px; }
  .block-list > li, .matrix > li, .posts--list > li {
    border-bottom-width: 1px;
    padding: 12px; }

.block-list__link, .matrix__link, .posts--link {
  display: block;
  padding: 12px;
  margin: -12px; }

/*------------------------------------*\
    $MATRIX
\*------------------------------------*/
/**
 * Create a grid of items out of a single list, e.g.:
 *
   <ul class="matrix  three-cols">
       <li class=all-cols>Lorem</li>
       <li>Ipsum <a href=#>dolor</a></li>
       <li><a href=# class=matrix__link>Sit</a></li>
       <li>Amet</li>
       <li class=all-cols>Consectetuer</li>
   </ul>
 *
 * Extend this object in your theme stylesheet.
 *
 * Demo: jsfiddle.net/inuitcss/Y2zrU
 *
 */
.matrix {
  border-left-width: 1px; }
  .matrix > li {
    float: left;
    border-right-width: 1px; }

/**
 * The `.multi-list` object is a lot like the `.matrix` object only without the
 * blocky borders and padding.
 *
   <ul class="multi-list  four-cols">
       <li>Lorem</li>
       <li>Ipsum</li>
       <li>Dolor</li>
       <li>Sit</li>
   </ul>
 *
 * Demo: jsfiddle.net/inuitcss/Y2zrU
 *
 */
.multi-list {
  list-style: none;
  margin-left: 0; }

.multi-list > li {
  float: left; }

/**
 * Apply these classes alongside the `.matrix` or `.multi-list` classes on
 * lists to determine how wide their columns are.
 */
.two-cols > li {
  width: 50%; }

.three-cols > li {
  width: 33.333%; }

.four-cols > li {
  width: 25%; }

.five-cols > li {
  width: 20%; }

/**
 * Unfortunately we have to qualify this selector in order to bring its
 * specificity above the `.[number]-cols > li` selectors above.
 */
.matrix > .all-cols,
.multi-list > .all-cols {
  width: 100%; }

/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Sizes in human readable format. These are used in conjunction with other
 * objects and abstractions found in inuit.css, most commonly the grid system
 * and faux flexbox.
 *
 * We have a mixin to generate our widths and their breakpoint-specific
 * variations.
 */
/**
* Whole
*/
.one-whole {
  width: 100%; }

/**
* Halves
*/
.one-half, .two-quarters, .three-sixths, .four-eighths, .five-tenths, .six-twelfths {
  width: 50%; }

/**
* Thirds
*/
.one-third, .two-sixths, .four-twelfths {
  width: 33.333%; }

.two-thirds, .four-sixths, .eight-twelfths {
  width: 66.666%; }

/**
* Quarters
*/
.one-quarter, .two-eighths, .three-twelfths {
  width: 25%; }

.three-quarters, .six-eighths, .nine-twelfths {
  width: 75%; }

/**
* Fifths
*/
.one-fifth, .two-tenths {
  width: 20%; }

.two-fifths, .four-tenths {
  width: 40%; }

.three-fifths, .six-tenths {
  width: 60%; }

.four-fifths, .eight-tenths {
  width: 80%; }

/**
* Sixths
*/
.one-sixth, .two-twelfths {
  width: 16.666%; }

.five-sixths, .ten-twelfths {
  width: 83.333%; }

/**
* Eighths
*/
.one-eighth {
  width: 12.5%; }

.three-eighths {
  width: 37.5%; }

.five-eighths {
  width: 62.5%; }

.seven-eighths {
  width: 87.5%; }

/**
* Tenths
*/
.one-tenth {
  width: 10%; }

.three-tenths {
  width: 30%; }

.seven-tenths {
  width: 70%; }

.nine-tenths {
  width: 90%; }

/**
* Twelfths
*/
.one-twelfth {
  width: 8.333%; }

.five-twelfths {
  width: 41.666%; }

.seven-twelfths {
  width: 58.333%; }

.eleven-twelfths {
  width: 91.666%; }

/**
 * If you have set `$responsive` to ‘true’ in `_vars.scss` then you now have
 * access to these classes. You can define at which breakpoint you’d like an
 * element to be a certain size, e.g.:
 *
 * `<div class="g  one-quarter  lap-one-half  palm-one-whole"> ... </div>`
 *
 * This would create a `div` that, at ‘desktop’ sizes, takes up a quarter of the
 * horizontal space, a half of that space at ‘tablet’ sizes, and goes full width
 * at ‘mobile’ sizes.
 *
 * Demo: jsfiddle.net/inuitcss/WS4Ge
 *
 */
@media only screen and (max-width: 480px) {
  /**
  * Whole
  */
  .palm-one-whole {
    width: 100%; }

  /**
  * Halves
  */
  .palm-one-half, .palm-two-quarters, .palm-three-sixths, .palm-four-eighths, .palm-five-tenths, .palm-six-twelfths {
    width: 50%; }

  /**
  * Thirds
  */
  .palm-one-third, .palm-two-sixths, .palm-four-twelfths {
    width: 33.333%; }

  .palm-two-thirds, .palm-four-sixths, .palm-eight-twelfths {
    width: 66.666%; }

  /**
  * Quarters
  */
  .palm-one-quarter, .palm-two-eighths, .palm-three-twelfths {
    width: 25%; }

  .palm-three-quarters, .palm-six-eighths, .palm-nine-twelfths {
    width: 75%; }

  /**
  * Fifths
  */
  .palm-one-fifth, .palm-two-tenths {
    width: 20%; }

  .palm-two-fifths, .palm-four-tenths {
    width: 40%; }

  .palm-three-fifths, .palm-six-tenths {
    width: 60%; }

  .palm-four-fifths, .palm-eight-tenths {
    width: 80%; }

  /**
  * Sixths
  */
  .palm-one-sixth, .palm-two-twelfths {
    width: 16.666%; }

  .palm-five-sixths, .palm-ten-twelfths {
    width: 83.333%; }

  /**
  * Eighths
  */
  .palm-one-eighth {
    width: 12.5%; }

  .palm-three-eighths {
    width: 37.5%; }

  .palm-five-eighths {
    width: 62.5%; }

  .palm-seven-eighths {
    width: 87.5%; }

  /**
  * Tenths
  */
  .palm-one-tenth {
    width: 10%; }

  .palm-three-tenths {
    width: 30%; }

  .palm-seven-tenths {
    width: 70%; }

  .palm-nine-tenths {
    width: 90%; }

  /**
  * Twelfths
  */
  .palm-one-twelfth {
    width: 8.333%; }

  .palm-five-twelfths {
    width: 41.666%; }

  .palm-seven-twelfths {
    width: 58.333%; }

  .palm-eleven-twelfths {
    width: 91.666%; } }
@media only screen and (min-width: 481px) and (max-width: 1023px) {
  /**
  * Whole
  */
  .lap-one-whole {
    width: 100%; }

  /**
  * Halves
  */
  .lap-one-half, .lap-two-quarters, .lap-three-sixths, .lap-four-eighths, .lap-five-tenths, .lap-six-twelfths {
    width: 50%; }

  /**
  * Thirds
  */
  .lap-one-third, .lap-two-sixths, .lap-four-twelfths {
    width: 33.333%; }

  .lap-two-thirds, .lap-four-sixths, .lap-eight-twelfths {
    width: 66.666%; }

  /**
  * Quarters
  */
  .lap-one-quarter, .lap-two-eighths, .lap-three-twelfths {
    width: 25%; }

  .lap-three-quarters, .lap-six-eighths, .lap-nine-twelfths {
    width: 75%; }

  /**
  * Fifths
  */
  .lap-one-fifth, .lap-two-tenths {
    width: 20%; }

  .lap-two-fifths, .lap-four-tenths {
    width: 40%; }

  .lap-three-fifths, .lap-six-tenths {
    width: 60%; }

  .lap-four-fifths, .lap-eight-tenths {
    width: 80%; }

  /**
  * Sixths
  */
  .lap-one-sixth, .lap-two-twelfths {
    width: 16.666%; }

  .lap-five-sixths, .lap-ten-twelfths {
    width: 83.333%; }

  /**
  * Eighths
  */
  .lap-one-eighth {
    width: 12.5%; }

  .lap-three-eighths {
    width: 37.5%; }

  .lap-five-eighths {
    width: 62.5%; }

  .lap-seven-eighths {
    width: 87.5%; }

  /**
  * Tenths
  */
  .lap-one-tenth {
    width: 10%; }

  .lap-three-tenths {
    width: 30%; }

  .lap-seven-tenths {
    width: 70%; }

  .lap-nine-tenths {
    width: 90%; }

  /**
  * Twelfths
  */
  .lap-one-twelfth {
    width: 8.333%; }

  .lap-five-twelfths {
    width: 41.666%; }

  .lap-seven-twelfths {
    width: 58.333%; }

  .lap-eleven-twelfths {
    width: 91.666%; } }
@media only screen and (min-width: 481px) {
  /**
  * Whole
  */
  .lap-and-up-one-whole {
    width: 100%; }

  /**
  * Halves
  */
  .lap-and-up-one-half, .lap-and-up-two-quarters, .lap-and-up-three-sixths, .lap-and-up-four-eighths, .lap-and-up-five-tenths, .lap-and-up-six-twelfths {
    width: 50%; }

  /**
  * Thirds
  */
  .lap-and-up-one-third, .lap-and-up-two-sixths, .lap-and-up-four-twelfths {
    width: 33.333%; }

  .lap-and-up-two-thirds, .lap-and-up-four-sixths, .lap-and-up-eight-twelfths {
    width: 66.666%; }

  /**
  * Quarters
  */
  .lap-and-up-one-quarter, .lap-and-up-two-eighths, .lap-and-up-three-twelfths {
    width: 25%; }

  .lap-and-up-three-quarters, .lap-and-up-six-eighths, .lap-and-up-nine-twelfths {
    width: 75%; }

  /**
  * Fifths
  */
  .lap-and-up-one-fifth, .lap-and-up-two-tenths {
    width: 20%; }

  .lap-and-up-two-fifths, .lap-and-up-four-tenths {
    width: 40%; }

  .lap-and-up-three-fifths, .lap-and-up-six-tenths {
    width: 60%; }

  .lap-and-up-four-fifths, .lap-and-up-eight-tenths {
    width: 80%; }

  /**
  * Sixths
  */
  .lap-and-up-one-sixth, .lap-and-up-two-twelfths {
    width: 16.666%; }

  .lap-and-up-five-sixths, .lap-and-up-ten-twelfths {
    width: 83.333%; }

  /**
  * Eighths
  */
  .lap-and-up-one-eighth {
    width: 12.5%; }

  .lap-and-up-three-eighths {
    width: 37.5%; }

  .lap-and-up-five-eighths {
    width: 62.5%; }

  .lap-and-up-seven-eighths {
    width: 87.5%; }

  /**
  * Tenths
  */
  .lap-and-up-one-tenth {
    width: 10%; }

  .lap-and-up-three-tenths {
    width: 30%; }

  .lap-and-up-seven-tenths {
    width: 70%; }

  .lap-and-up-nine-tenths {
    width: 90%; }

  /**
  * Twelfths
  */
  .lap-and-up-one-twelfth {
    width: 8.333%; }

  .lap-and-up-five-twelfths {
    width: 41.666%; }

  .lap-and-up-seven-twelfths {
    width: 58.333%; }

  .lap-and-up-eleven-twelfths {
    width: 91.666%; } }
@media only screen and (max-width: 1023px) {
  /**
  * Whole
  */
  .portable-one-whole {
    width: 100%; }

  /**
  * Halves
  */
  .portable-one-half, .portable-two-quarters, .portable-three-sixths, .portable-four-eighths, .portable-five-tenths, .portable-six-twelfths {
    width: 50%; }

  /**
  * Thirds
  */
  .portable-one-third, .portable-two-sixths, .portable-four-twelfths {
    width: 33.333%; }

  .portable-two-thirds, .portable-four-sixths, .portable-eight-twelfths {
    width: 66.666%; }

  /**
  * Quarters
  */
  .portable-one-quarter, .portable-two-eighths, .portable-three-twelfths {
    width: 25%; }

  .portable-three-quarters, .portable-six-eighths, .portable-nine-twelfths {
    width: 75%; }

  /**
  * Fifths
  */
  .portable-one-fifth, .portable-two-tenths {
    width: 20%; }

  .portable-two-fifths, .portable-four-tenths {
    width: 40%; }

  .portable-three-fifths, .portable-six-tenths {
    width: 60%; }

  .portable-four-fifths, .portable-eight-tenths {
    width: 80%; }

  /**
  * Sixths
  */
  .portable-one-sixth, .portable-two-twelfths {
    width: 16.666%; }

  .portable-five-sixths, .portable-ten-twelfths {
    width: 83.333%; }

  /**
  * Eighths
  */
  .portable-one-eighth {
    width: 12.5%; }

  .portable-three-eighths {
    width: 37.5%; }

  .portable-five-eighths {
    width: 62.5%; }

  .portable-seven-eighths {
    width: 87.5%; }

  /**
  * Tenths
  */
  .portable-one-tenth {
    width: 10%; }

  .portable-three-tenths {
    width: 30%; }

  .portable-seven-tenths {
    width: 70%; }

  .portable-nine-tenths {
    width: 90%; }

  /**
  * Twelfths
  */
  .portable-one-twelfth {
    width: 8.333%; }

  .portable-five-twelfths {
    width: 41.666%; }

  .portable-seven-twelfths {
    width: 58.333%; }

  .portable-eleven-twelfths {
    width: 91.666%; } }
@media only screen and (min-width: 1024px) {
  /**
  * Whole
  */
  .desk-one-whole {
    width: 100%; }

  /**
  * Halves
  */
  .desk-one-half, .desk-two-quarters, .desk-three-sixths, .desk-four-eighths, .desk-five-tenths, .desk-six-twelfths {
    width: 50%; }

  /**
  * Thirds
  */
  .desk-one-third, .desk-two-sixths, .desk-four-twelfths {
    width: 33.333%; }

  .desk-two-thirds, .desk-four-sixths, .desk-eight-twelfths {
    width: 66.666%; }

  /**
  * Quarters
  */
  .desk-one-quarter, .desk-two-eighths, .desk-three-twelfths {
    width: 25%; }

  .desk-three-quarters, .desk-six-eighths, .desk-nine-twelfths {
    width: 75%; }

  /**
  * Fifths
  */
  .desk-one-fifth, .desk-two-tenths {
    width: 20%; }

  .desk-two-fifths, .desk-four-tenths {
    width: 40%; }

  .desk-three-fifths, .desk-six-tenths {
    width: 60%; }

  .desk-four-fifths, .desk-eight-tenths {
    width: 80%; }

  /**
  * Sixths
  */
  .desk-one-sixth, .desk-two-twelfths {
    width: 16.666%; }

  .desk-five-sixths, .desk-ten-twelfths {
    width: 83.333%; }

  /**
  * Eighths
  */
  .desk-one-eighth {
    width: 12.5%; }

  .desk-three-eighths {
    width: 37.5%; }

  .desk-five-eighths {
    width: 62.5%; }

  .desk-seven-eighths {
    width: 87.5%; }

  /**
  * Tenths
  */
  .desk-one-tenth {
    width: 10%; }

  .desk-three-tenths {
    width: 30%; }

  .desk-seven-tenths {
    width: 70%; }

  .desk-nine-tenths {
    width: 90%; }

  /**
  * Twelfths
  */
  .desk-one-twelfth {
    width: 8.333%; }

  .desk-five-twelfths {
    width: 41.666%; }

  .desk-seven-twelfths {
    width: 58.333%; }

  .desk-eleven-twelfths {
    width: 91.666%; } }
/**
 * If you have set the additional `$responsive-extra` variable to ‘true’ in
 * `_vars.scss` then you now have access to the following class available to
 * accomodate much larger screen resolutions.
 */
/* endif */
/*------------------------------------*\
    MIXINS.SCSS
\*------------------------------------*/
/*------------------------------------*\
    $SCAFFOLDING
\*------------------------------------*/
body {
  color: #4d4d4d;
  background-color: #fff;
  max-width: 700px;
  margin: 0 auto;
  padding: 12px;
  padding-bottom: 0; }
  @media only screen and (min-width: 481px) {
    body {
      padding-top: 24px;
      padding-right: 24px;
      padding-left: 24px; } }

a {
  color: #f25454;
  text-decoration: none; }

a:hover,
a:focus {
  color: #a10c0c;
  text-decoration: underline; }

blockquote {
  color: #aaa;
  border-left: 4px solid #ccc;
  padding: 0 12px; }

/*------------------------------------*\
    HEADER.SCSS
\*------------------------------------*/
.header {
  margin-bottom: 24px; }

.header--profile-picture {
  width: 80px;
  height: 80px;
  margin: 0 auto;
  margin-bottom: 12px; }
  .header--profile-picture a {
    display: block; }
  .header--profile-picture img {
    width: 80px;
    height: 80px;
    -moz-border-radius: 40px;
    -webkit-border-radius: 40px;
    border-radius: 40px; }

.header--title {
  color: #f25454;
  text-align: center;
  margin-bottom: 6px; }
  .header--title > a:hover, .header--title > a:focus {
    color: #f25454;
    text-decoration: none; }

.header--tagline {
  color: #aaa;
  text-align: center; }

.header--nav, .footer--links {
  margin-bottom: 0; }
  .header--nav > li > a, .footer--links > li > a {
    padding: 12px;
    font-weight: bold; }
    .header--nav > li > a:hover, .footer--links > li > a:hover, .header--nav > li > a:focus, .footer--links > li > a:focus {
      text-decoration: none; }

/*------------------------------------*\
    FOOTER.SCSS
\*------------------------------------*/
.footer {
  margin-bottom: 24px; }

.footer--links {
  margin-bottom: 12px; }

.footer--copyright {
  margin: 0;
  text-align: center;
  font-size: 12px;
  color: #aaa; }

#footer.disqus-footer__wrapper {
  display: none; }

/*------------------------------------*\
    PAGE.SCSS
\*------------------------------------*/
.page, .post {
  margin-bottom: 24px; }

.page, .post {
  font-size: 18px;
  line-height: 1.4; }
  @media only screen and (min-width: 481px) {
    .page, .post {
      font-size: 20px;
      line-height: 1.45; } }
  .page h1, .post h1 {
    color: #f25454;
    line-height: 1.2; }
    @media only screen and (min-width: 481px) {
      .page h1, .post h1 {
        font-size: 48px;
        line-height: 1.1; } }
  .page h2, .post h2, .page h3, .post h3 {
    color: #333;
    line-height: 1.2; }
  .page h2, .post h2 {
    margin-top: 48px; }

/*------------------------------------*\
    POSTS.SCSS
\*------------------------------------*/
.posts {
  margin-bottom: 24px; }

.posts--link:hover, .posts--link:focus {
  color: #f25454;
  text-decoration: none;
  background: #fde2e2; }

.posts--date {
  color: #aaa; }

/*------------------------------------*\
    POST.SCSS
\*------------------------------------*/
.post h1 {
  margin-bottom: 0; }

.post--date {
  color: #aaa;
  margin-bottom: 24px; }

.post figure {
  text-align: center; }
  .post figure img {
    display: inline; }
  .post figure figcaption {
    font-size: 16px;
    font-style: italic; }

.post--comments {
  margin-top: 48px;
  margin-bottom: 24px; }

.post h2 {
  margin-top: 72px; }

.post h1 {
  margin-top: 72px; }

/*------------------------------------*\
    CODE.SCSS
\*------------------------------------*/
code {
  font-family: Consolas, "Courier New", monospace; }

pre {
  padding: 5px 10px;
  word-wrap: break-word; }
  pre, pre > code {
    font-size: 14px; }
    @media only screen and (min-width: 481px) {
      pre, pre > code {
        font-size: 16px; } }

p > code,
li > code {
  font-size: 85%;
  padding-top: 0.2em;
  padding-bottom: 0.2em;
  background-color: #fdf6e3;
  color: #586e75; }
  p > code::before, p > code::after,
  li > code::before,
  li > code::after {
    letter-spacing: -0.2em;
    content: "\00a0"; }

/* Solarized Light
http://ethanschoonover.com/solarized
SOLARIZED HEX      ROLE
--------- -------- ------------------------------------------
base01    #586e75  body text / default code / primary content
base1     #93a1a1  comments / secondary content
base3     #fdf6e3  background
orange    #cb4b16  constants
red       #dc322f  regex, special keywords
blue      #268bd2  reserved keywords
cyan      #2aa198  strings, numbers
green     #859900  operators, other keywords
*/
.highlight {
  background-color: #fdf6e3;
  color: #586e75; }

.highlight .c {
  color: #93a1a1; }

/* Comment */
.highlight .err {
  color: #586e75; }

/* Error */
.highlight .g {
  color: #586e75; }

/* Generic */
.highlight .k {
  color: #859900; }

/* Keyword */
.highlight .l {
  color: #586e75; }

/* Literal */
.highlight .n {
  color: #586e75; }

/* Name */
.highlight .o {
  color: #859900; }

/* Operator */
.highlight .x {
  color: #cb4b16; }

/* Other */
.highlight .p {
  color: #586e75; }

/* Punctuation */
.highlight .cm {
  color: #93a1a1; }

/* Comment.Multiline */
.highlight .cp {
  color: #859900; }

/* Comment.Preproc */
.highlight .c1 {
  color: #93a1a1; }

/* Comment.Single */
.highlight .cs {
  color: #859900; }

/* Comment.Special */
.highlight .gd {
  color: #2aa198; }

/* Generic.Deleted */
.highlight .ge {
  color: #586e75;
  font-style: italic; }

/* Generic.Emph */
.highlight .gr {
  color: #dc322f; }

/* Generic.Error */
.highlight .gh {
  color: #cb4b16; }

/* Generic.Heading */
.highlight .gi {
  color: #859900; }

/* Generic.Inserted */
.highlight .go {
  color: #586e75; }

/* Generic.Output */
.highlight .gp {
  color: #586e75; }

/* Generic.Prompt */
.highlight .gs {
  color: #586e75;
  font-weight: bold; }

/* Generic.Strong */
.highlight .gu {
  color: #cb4b16; }

/* Generic.Subheading */
.highlight .gt {
  color: #586e75; }

/* Generic.Traceback */
.highlight .kc {
  color: #cb4b16; }

/* Keyword.Constant */
.highlight .kd {
  color: #268bd2; }

/* Keyword.Declaration */
.highlight .kn {
  color: #859900; }

/* Keyword.Namespace */
.highlight .kp {
  color: #859900; }

/* Keyword.Pseudo */
.highlight .kr {
  color: #268bd2; }

/* Keyword.Reserved */
.highlight .kt {
  color: #dc322f; }

/* Keyword.Type */
.highlight .ld {
  color: #586e75; }

/* Literal.Date */
.highlight .m {
  color: #2aa198; }

/* Literal.Number */
.highlight .s {
  color: #2aa198; }

/* Literal.String */
.highlight .na {
  color: #586e75; }

/* Name.Attribute */
.highlight .nb {
  color: #B58900; }

/* Name.Builtin */
.highlight .nc {
  color: #268bd2; }

/* Name.Class */
.highlight .no {
  color: #cb4b16; }

/* Name.Constant */
.highlight .nd {
  color: #268bd2; }

/* Name.Decorator */
.highlight .ni {
  color: #cb4b16; }

/* Name.Entity */
.highlight .ne {
  color: #cb4b16; }

/* Name.Exception */
.highlight .nf {
  color: #268bd2; }

/* Name.Function */
.highlight .nl {
  color: #586e75; }

/* Name.Label */
.highlight .nn {
  color: #586e75; }

/* Name.Namespace */
.highlight .nx {
  color: #586e75; }

/* Name.Other */
.highlight .py {
  color: #586e75; }

/* Name.Property */
.highlight .nt {
  color: #268bd2; }

/* Name.Tag */
.highlight .nv {
  color: #268bd2; }

/* Name.Variable */
.highlight .ow {
  color: #859900; }

/* Operator.Word */
.highlight .w {
  color: #586e75; }

/* Text.Whitespace */
.highlight .mf {
  color: #2aa198; }

/* Literal.Number.Float */
.highlight .mh {
  color: #2aa198; }

/* Literal.Number.Hex */
.highlight .mi {
  color: #2aa198; }

/* Literal.Number.Integer */
.highlight .mo {
  color: #2aa198; }

/* Literal.Number.Oct */
.highlight .sb {
  color: #93a1a1; }

/* Literal.String.Backtick */
.highlight .sc {
  color: #2aa198; }

/* Literal.String.Char */
.highlight .sd {
  color: #586e75; }

/* Literal.String.Doc */
.highlight .s2 {
  color: #2aa198; }

/* Literal.String.Double */
.highlight .se {
  color: #cb4b16; }

/* Literal.String.Escape */
.highlight .sh {
  color: #586e75; }

/* Literal.String.Heredoc */
.highlight .si {
  color: #2aa198; }

/* Literal.String.Interpol */
.highlight .sx {
  color: #2aa198; }

/* Literal.String.Other */
.highlight .sr {
  color: #dc322f; }

/* Literal.String.Regex */
.highlight .s1 {
  color: #2aa198; }

/* Literal.String.Single */
.highlight .ss {
  color: #2aa198; }

/* Literal.String.Symbol */
.highlight .bp {
  color: #268bd2; }

/* Name.Builtin.Pseudo */
.highlight .vc {
  color: #268bd2; }

/* Name.Variable.Class */
.highlight .vg {
  color: #268bd2; }

/* Name.Variable.Global */
.highlight .vi {
  color: #268bd2; }

/* Name.Variable.Instance */
.highlight .il {
  color: #2aa198; }

/* Literal.Number.Integer.Long */
