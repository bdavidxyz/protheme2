<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>David Boureau - Web development, acquisition</title>
    <description>David Boureau is a web developer based in Paris, France. He has a master in computer  science, works as a full-stack developer mostly in JavaScript and Node.js, as well as Ruby and Java.
</description>
    <link>http://bdavidxyz.com/</link>
    <atom:link href="http://bdavidxyz.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 24 Sep 2020 16:39:31 +0200</pubDate>
    <lastBuildDate>Thu, 24 Sep 2020 16:39:31 +0200</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>Indie hacker meaning</title>
        <description>&lt;h2 id=&quot;1-definition&quot;&gt;1. Definition&lt;/h2&gt;

&lt;p&gt;On his &lt;a href=&quot;https://www.indiehackers.com/about&quot; target=&quot;_blank&quot;&gt;excellent website&lt;/a&gt; dedicated to indie hackers, Courtland Allen give us a great definition :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You‚Äôre an indie hacker if you‚Äôve set out to make money independently. That means you‚Äôre generating revenue directly from your customers, not indirectly through an employer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Indie hackers are often solo founders, software engineers, and bootstrapped, but it‚Äôs totally okay if you have co founders, can‚Äôt code, and have raised money.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In short : technically speaking, you are &lt;em&gt;alone&lt;/em&gt; to build a ‚ù§Ô∏èlovely‚ù§Ô∏è product.&lt;/p&gt;

&lt;h2 id=&quot;2-constraint&quot;&gt;2. Constraint&lt;/h2&gt;

&lt;p&gt;So now you are the one-(wo)man-band.&lt;/p&gt;

&lt;p&gt;You‚Äôre &lt;em&gt;alone&lt;/em&gt; to achieve :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deployment&lt;/li&gt;
  &lt;li&gt;Test suite&lt;/li&gt;
  &lt;li&gt;Maintainable CSS&lt;/li&gt;
  &lt;li&gt;Maintainable algorithms&lt;/li&gt;
  &lt;li&gt;Database(s)&lt;/li&gt;
  &lt;li&gt;Async Jobs&lt;/li&gt;
  &lt;li&gt;Security&lt;/li&gt;
  &lt;li&gt;Logging&lt;/li&gt;
  &lt;li&gt;Accessibility&lt;/li&gt;
  &lt;li&gt;Performance&lt;/li&gt;
  &lt;li&gt;And probably a lot more‚Ä¶&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your business co-founder has one problem : üí∞ market.&lt;/p&gt;

&lt;p&gt;You have one problem : ‚åõ &lt;strong&gt;time&lt;/strong&gt; ‚åõ&lt;/p&gt;

&lt;h2 id=&quot;3-how-to-avoid-exhaustion&quot;&gt;3. How to avoid exhaustion&lt;/h2&gt;

&lt;p&gt;In a personal perspective, if you don‚Äôt deliver value at a fast pace, you could quickly dive and endanger your motivation, finance, health, relationships, etc.&lt;/p&gt;

&lt;p&gt;In a business perspective,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Faster shipping means a faster feedback cycle. Faster feedback cycle means you can make a lot of small bets, rather than investing a lot of time in one big bet. Statistically, a lot of small bets have a better chance of paying off for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So how to stay on the safe side of entrepreneurship ?&lt;/p&gt;

&lt;h3 id=&quot;a-experience&quot;&gt;a. Experience&lt;/h3&gt;

&lt;p&gt;Without experience, outside the fact it will be longer to build the product, you will probably fail to prioritize tasks correctly.&lt;/p&gt;

&lt;p&gt;Which bug is important to correct right now, and which nasty hack can stay here for decades requires intuition, which can only be acquired by experience.&lt;/p&gt;

&lt;p&gt;It could take months or years depending on your acquaintance with coding.&lt;/p&gt;

&lt;p&gt;Try as many tools as possible, then pick the ones where you feel the most comfortable.&lt;/p&gt;

&lt;h3 id=&quot;b-boring-business-boring-stack&quot;&gt;b. Boring business, boring stack&lt;/h3&gt;

&lt;p&gt;Choose the most boring possible business. To the contrary, you should avoid&lt;/p&gt;

&lt;p&gt;&lt;small&gt;(list inspired from another dev)&lt;/small&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Anything that requires a lot of users to achieve success.&lt;/li&gt;
  &lt;li&gt;Anything that involves ML/AI, crypto, hard algorithm problems.&lt;/li&gt;
  &lt;li&gt;Anything that involves scraping.&lt;/li&gt;
  &lt;li&gt;Anything that is hot right now and you want to jump on the bandwagon.&lt;/li&gt;
  &lt;li&gt;Anything that involves tons of complicated, nested, real-time UI screens.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I mean by ‚Äúboring‚Äù : nothing shiny at first glance, but it solves a simple, perfectly identified problem by someone who already works in the targeted industry.&lt;/p&gt;

&lt;p&gt;Be reassured, a vast majority of regular, everyday business problems can be solved with plain, &lt;a href=&quot;https://hackernoon.com/the-boring-stack-the-best-way-to-build-interesting-things-9f54420f683e&quot; target=&quot;_blank&quot;&gt;fullstack, server-rendered, boring&lt;/a&gt; web framework.&lt;/p&gt;

&lt;h3 id=&quot;c-trustful-relationships&quot;&gt;c. Trustful relationships&lt;/h3&gt;

&lt;p&gt;With your co-founder or users, build one-to-one, trustful, warm and friendly relationships  . ü•∞&lt;/p&gt;

&lt;p&gt;Yeah I know, it may sound obvious, so I won‚Äôt develop further.&lt;/p&gt;

&lt;h2 id=&quot;3-a-possible-stack&quot;&gt;3. A possible stack&lt;/h2&gt;

&lt;h3 id=&quot;a-deeply-integrated-fullstack-framework&quot;&gt;a. Deeply integrated, fullstack framework&lt;/h3&gt;

&lt;p&gt;I can see only 3 candidates here : Django, Laravel, Rails.&lt;/p&gt;

&lt;p&gt;Why there are no such tools in the Java or JavaScript field remains a mystery (well, they actually exist, but are not widely enough adopted).&lt;/p&gt;

&lt;p&gt;Without this ‚Äúdeep integration philosophy‚Äù, you will spend time on hard, difficult, valueless, technical-only choices (like file &amp;amp; directory structure) instead of focusing on the business.&lt;/p&gt;

&lt;h3 id=&quot;b-avoid-js-as-much-as-possible&quot;&gt;b. Avoid JS as much as possible&lt;/h3&gt;

&lt;p&gt;It sounds completely to the opposite trend of these last years, but trust me, server-rendered pages are more than enough for 95% of your UI Screen.&lt;/p&gt;

&lt;p&gt;Moreover, it will avoid you a heavy mental headache about how the data is supposed to flow before to be rendered.&lt;/p&gt;

&lt;p&gt;Can you render this UI component directly from the server, with some sprinkled CSS ? well, no JS is needed.&lt;/p&gt;

&lt;p&gt;You found a way to avoid this modal ? Avoid it.&lt;/p&gt;

&lt;p&gt;Oh wait, this jQuery plugin does the job ? Avoid the no-jQuery trap and drop the plugin to your app.&lt;/p&gt;

&lt;p&gt;I‚Äôm not an anti-JS. I learned &amp;amp; used multiple JS (ES6) frameworks.&lt;/p&gt;

&lt;p&gt;But I use them on the very few cases they are needed : screens with reactive, nested UI components. In my last project it was needed only once (for &lt;em&gt;~100&lt;/em&gt; differents screens)&lt;/p&gt;

&lt;h3 id=&quot;b-bootstrap&quot;&gt;b. Bootstrap&lt;/h3&gt;

&lt;p&gt;In the industry I tend to avoid Bootstrap. It comes with design opinions in mind that does not match the ones of your UI designer.&lt;/p&gt;

&lt;p&gt;However, these opinions save you tons of time for a solo project. Vertical rhythm, typography, helpers, a11y, bunch of utilities, components, and so on.&lt;/p&gt;

&lt;p&gt;Do not choose another framework here, (except maybe Tailwind), because large adoption means tons of examples and help available at every corner case.&lt;/p&gt;

&lt;p&gt;Do not overthink UI design. You can improve appearance and experience later on.&lt;/p&gt;

&lt;h3 id=&quot;c-heroku&quot;&gt;c. Heroku&lt;/h3&gt;

&lt;p&gt;It saves you tons of devops &amp;amp; sysadmin problems, so go ahead even if everything is not perfect.&lt;/p&gt;

&lt;h3 id=&quot;d-few-tests&quot;&gt;d. Few tests&lt;/h3&gt;

&lt;p&gt;Keep a few high-level, integration tests, just the few that will maximize your confidence. In the industry it is a better practice to unit test everything, but for a solo project, chances are you will never have enough time to do so.&lt;/p&gt;

&lt;p&gt;However each function you write must be very small, expressive, focused, easy to read, without side-effects, or maintenance will very soon be a nightmare.&lt;/p&gt;

&lt;p&gt;Like in your everyday job :)&lt;/p&gt;

&lt;h2 id=&quot;4-conclusion&quot;&gt;4. Conclusion&lt;/h2&gt;

&lt;p&gt;I started with a definition of what an ‚ÄúIndie Hacker‚Äù is, with a simple consequence : time is not your friend.&lt;/p&gt;

&lt;p&gt;Being full-time or part-time on your solo project is the wrong debate : you must be efficient at all levels to deliver value at a fast pace, in order to avoid motivation fall.&lt;/p&gt;

&lt;p&gt;This is why I listed all tools that are - not perfect, but who is ? - ‚Äúgood enough‚Äù to match this definition.&lt;/p&gt;

&lt;p&gt;Something like 99% of startups will fail anyway, so this article was about how to lower that risk to only 95%. üòÇ&lt;/p&gt;

&lt;p&gt;Good luck to all, happy coding !&lt;/p&gt;

&lt;p&gt;üòçüòçüòç&lt;/p&gt;

&lt;p&gt;David.&lt;/p&gt;

</description>
        <pubDate>Thu, 24 Sep 2020 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/indie-hacker-meaning/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/indie-hacker-meaning/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Rails 6 and Active Job tutorial</title>
        <description>&lt;h2 id=&quot;1-overview&quot;&gt;1. Overview&lt;/h2&gt;

&lt;p&gt;Active Job is a feature of the Ruby-on-Rails framework, that allows you to launch heavy jobs in the background.&lt;/p&gt;

&lt;p&gt;For example, scraping or mailing are these kind of jobs, that are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;time-consuming,&lt;/li&gt;
  &lt;li&gt;asynchronous,&lt;/li&gt;
  &lt;li&gt;launched at pre-defined time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are the exact opposite of the request/response pattern of your web server, that is fast, synchronous, and launched at anytime.&lt;/p&gt;

&lt;p&gt;A serious drawback is requires a lot more tooling than the ‚Äúrails new‚Äù command offers.&lt;/p&gt;

&lt;p&gt;Even building the simplest ‚Äúhello world‚Äù job is not &lt;em&gt;that&lt;/em&gt; simple.&lt;/p&gt;

&lt;p&gt;This tutorial is dedicated to those who&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;üïí have few time to learn,&lt;/li&gt;
  &lt;li&gt;‚ù§Ô∏è loves to learn by example&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-steps-to-reproduce&quot;&gt;2. Steps to reproduce&lt;/h2&gt;

&lt;h3 id=&quot;2a-prerequisites&quot;&gt;2a. Prerequisites&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; git &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
git version 2.7.2
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; docker &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
Docker version 17.12.0-ce
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; docker-compose &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
docker-compose version 1.18.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Any upper version should work&lt;/p&gt;

&lt;h3 id=&quot;2b-installation&quot;&gt;2b. Installation&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
~/workspace/&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/bdavidxyz/rails_sidekiq_docker

~/workspace/&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;rails_sidekiq_docker

~/workspace/rails_sidekiq_docker&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; docker-compose build
... build images

~/workspace/rails_sidekiq_docker&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; docker-compose run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-deps&lt;/span&gt; web rails new &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--skip&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;postgresql
... create new rails project

~/workspace/rails_sidekiq_docker&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; ./.dockerdev/post_build.sh
... create and modify some files

~/workspace/rails_sidekiq_docker&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now go to &lt;a href=&quot;http://localhost:3000/sidekiq&quot;&gt;localhost:3000/sidekiq&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hurray ! You can monitor every job.&lt;/p&gt;

&lt;p&gt;I suggest you to see in more details docker-compose, to see how all the tools talks to each other.&lt;/p&gt;

&lt;p&gt;I also suggest to go to every file created or modified by post_build.sh&lt;/p&gt;

&lt;h2 id=&quot;3-create-a-hello-world-job&quot;&gt;3. Create a ‚Äúhello world‚Äù job&lt;/h2&gt;

&lt;p&gt;create file app/jobs/hello_world_job.rb&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/jobs/hello_world_job.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorldJob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationJob&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;queue_as&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:default&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello from HelloWorldJob'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;modify file app/controllers/welcome_controller.rb to call your job&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/welcome_controller.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;HelloWorldJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;wait: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now go to &lt;a href=&quot;http://localhost:3000&quot;&gt;localhost:3000&lt;/a&gt;, it will ask to enqueue the HelloWorldJob since the request goes through WelcomeController#index function.&lt;/p&gt;

&lt;p&gt;Now go to &lt;a href=&quot;http://localhost:3000/sidekiq&quot;&gt;localhost:3000/sidekiq&lt;/a&gt;, you will see the job in the ‚Äúscheduled‚Äù section.&lt;/p&gt;

&lt;p&gt;After a few seconds, it appears in the ‚ÄúProcessed‚Äù section&lt;/p&gt;

&lt;h2 id=&quot;4-conclusion&quot;&gt;4. Conclusion&lt;/h2&gt;

&lt;p&gt;We have built a working ‚Äúhello world‚Äù job in less than 3 minutes, without side-effects, with all required tooling and configuration.&lt;/p&gt;

&lt;p&gt;Enjoy !&lt;/p&gt;

&lt;p&gt;üòçüòçüòç&lt;/p&gt;

&lt;p&gt;David.&lt;/p&gt;

</description>
        <pubDate>Tue, 14 Jul 2020 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/rails-6-activejob-tutorial/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/rails-6-activejob-tutorial/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Mistakes I will avoid in my next Ruby-on-Rails project</title>
        <description>&lt;p&gt;My current, beloved, monolithic Rails app is 3 years old now.&lt;/p&gt;

&lt;p&gt;What if I had to start a new project today ?&lt;/p&gt;

&lt;p&gt;This is the classic situation where you could wonder : ‚ÄúWhich stack I should use in 2020 ?‚Äù&lt;/p&gt;

&lt;p&gt;After years of trying various tech stacks, I finally found the best way to produce high added value within a short amount of time, without depreciation and without compromising quality over the long term : Ruby-on-Rails.&lt;/p&gt;

&lt;p&gt;So the next famous stack to use in 2020 after the Ruby-on-Rails hype is ‚ÄúRuby-on-Rails, done right‚Äù.&lt;/p&gt;

&lt;p&gt;Of course these are thoughts base on my own experience, they are very subjective and very possibly criticized.&lt;/p&gt;

&lt;p&gt;Here are mistakes I will avoid in my next Ruby-on-Rails project :&lt;/p&gt;

&lt;h2 id=&quot;1-not-using-end-to-end-testing-as-a-priority&quot;&gt;1. Not using ‚Äúend-to-end testing‚Äù as a priority&lt;/h2&gt;

&lt;p&gt;The testing part is an endless debate, even with myself.&lt;/p&gt;

&lt;p&gt;There are weeks where I‚Äôm completly sure about ‚Äúunit test first‚Äù.&lt;/p&gt;

&lt;p&gt;Then a week where I‚Äôm sure about ‚Äúunit test last‚Äù.&lt;/p&gt;

&lt;p&gt;Then some more weeks with ‚ÄúUh no, end-to-end first‚Äù.&lt;/p&gt;

&lt;p&gt;Now I think all are importants, but end-to-end testing is more important than other kind of tests.&lt;/p&gt;

&lt;p&gt;It requires less mental effort to setup context and write test.&lt;/p&gt;

&lt;p&gt;You can write a lot LESS test, with a very good businness coverage, and decent technical coverage.&lt;/p&gt;

&lt;p&gt;Finally, it documents how and why the application works, far better than any other test.&lt;/p&gt;

&lt;p&gt;Of course I have also some decent unit coverage, but for my next project, I will not start without a Cypress suite correctly setted up, both locally and in CI.&lt;/p&gt;

&lt;h2 id=&quot;2-not-using-cypress&quot;&gt;2. Not using Cypress&lt;/h2&gt;

&lt;p&gt;Cypress is a &lt;em&gt;de-facto&lt;/em&gt; tool for end-to-end testing. I tried Capybara, but it works well mostly for server-rendered-only pages.&lt;/p&gt;

&lt;p&gt;If there is any Javascript, the problems start to grow.&lt;/p&gt;

&lt;p&gt;Compared to Selenium, Cypress doesn‚Äôt care about the underlying stack, have faster commands, less random errors, easier selectors, easier IDE.&lt;/p&gt;

&lt;p&gt;Cypress rocks.&lt;/p&gt;

&lt;h2 id=&quot;3-not-using-es6&quot;&gt;3. Not using ES6&lt;/h2&gt;

&lt;p&gt;In my last article, I was writing how easier it was to work with ES5, but now I must acknowledge that ES6 is the new standard, and it‚Äôs not going to go away anytime.&lt;/p&gt;

&lt;h2 id=&quot;4-sprockets&quot;&gt;4. Sprockets&lt;/h2&gt;

&lt;p&gt;I will keep Sprockets, but I won‚Äôt use it for my custom code. Why ? Locally, Webpack(er) does already everything what Sprockets is supposed to do.&lt;/p&gt;

&lt;p&gt;But must-go external gems may not use it (administrate for example).&lt;/p&gt;

&lt;h2 id=&quot;5-not-using-turbolinks&quot;&gt;5. Not using Turbolinks&lt;/h2&gt;

&lt;p&gt;I disabled Turbolinks on my current project because of the ‚Äútoo many headaches‚Äù problem, but now that I have seen the huge performance gap it involves, I will do everything to keep Turbolinks alive as much as possible.&lt;/p&gt;

&lt;h2 id=&quot;6-not-using-an-action-view-library&quot;&gt;6. Not using an ‚Äúaction view library‚Äù&lt;/h2&gt;

&lt;p&gt;React or Vue may be optionnal, but the need may arise quickly from the UI/UX part without a warning. So in my mind it is better to be prepared.&lt;/p&gt;

&lt;p&gt;I won‚Äôt use StimulusJS, because without centralized state, reasonning about what is going on in the frontend is a true nightmare.&lt;/p&gt;

&lt;h2 id=&quot;7-fall-into-the-technology-lock-in-trapp&quot;&gt;7. Fall into the ‚ÄúTechnology lock-in trapp‚Äù&lt;/h2&gt;

&lt;p&gt;I made this mistakes twice : with the Teaspoon JS test runner, and KnockoutJS.&lt;/p&gt;

&lt;p&gt;These are very decent technologies, robust, but not anymore actively maintained.&lt;/p&gt;

&lt;p&gt;Over the long run, it involves a lot of lacking features, that may be very frustrating.&lt;/p&gt;

&lt;h2 id=&quot;8-over-engineered-deployment-solution&quot;&gt;8. Over engineered deployment solution&lt;/h2&gt;

&lt;p&gt;I used mina for deployment, but I feel now that the bunch of configuration needed is another example of ‚ÄúTechnology lock-in‚Äù&lt;/p&gt;

&lt;h2 id=&quot;9-not-starting-with-docker&quot;&gt;9. Not starting with Docker&lt;/h2&gt;

&lt;p&gt;Using marketing words, Docker is a huge ‚Äúpain-killer‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Any newbies&lt;/strong&gt; can install the app from scratch, run specs, deploy to production or staging, with a very small README and very small technical knowledge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Any services&lt;/strong&gt; (like redis or sidekiq) can be added with 4 or 5 lines of configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Any version upgrade&lt;/strong&gt; of any service is completly effortless.&lt;/p&gt;

&lt;p&gt;It requires some efforts to keep the Docker stack simple, and some others to keep the Docker dev configuration similar to the production one.&lt;/p&gt;

&lt;p&gt;But, like Turbolinks, once mastered, the advantages quickly outweigh the negative effects.&lt;/p&gt;

&lt;h2 id=&quot;10-rspec&quot;&gt;10. RSpec&lt;/h2&gt;

&lt;p&gt;This is more controversial, but after having trying both RSpec and Minitest, I will go for Minitest.&lt;/p&gt;

&lt;p&gt;Minitest is a lot more simple.&lt;/p&gt;

&lt;p&gt;Of course, this simplicity comes with a cost : duplication.&lt;/p&gt;

&lt;p&gt;But RSpec push the ‚Äúcleaning‚Äù part of each test too far, making hard to reason about a single test.&lt;/p&gt;

&lt;p&gt;It is easier to reason with minitest, and not &lt;em&gt;that&lt;/em&gt; difficult to propagate a modification through all duplications.&lt;/p&gt;

&lt;h2 id=&quot;11-stay-away-from-the-rails-way&quot;&gt;11. Stay away from the Rails way&lt;/h2&gt;

&lt;p&gt;If you try to do something against the framework, you start to loose time and energy very quickly, which is precisely what Rails is fighting against.&lt;/p&gt;

&lt;p&gt;I once started to put all the controller logic inside &lt;em&gt;service classes&lt;/em&gt; to increase testability of what the controller is supposed to do.&lt;/p&gt;

&lt;p&gt;That was a very bad idea, actually. It adds a layer without increasing any value of the unit tests suite.&lt;/p&gt;

&lt;p&gt;Now I keep the controller logic inside controller logic, and this logic is tested through end-to-end tests.&lt;/p&gt;

&lt;h2 id=&quot;12-add-a-few-layer-if-necessary-thats-very-ok&quot;&gt;12. Add a few layer if necessary, that‚Äôs very ok&lt;/h2&gt;

&lt;p&gt;It seems a contradiction of the previous paragraph, but it‚Äôs not.&lt;/p&gt;

&lt;p&gt;I badly miss a view layer in some cases, the I added an app/view folder and then I was done.&lt;/p&gt;

&lt;h2 id=&quot;13-inuitcss&quot;&gt;13. InuitCSS&lt;/h2&gt;

&lt;p&gt;There‚Äôs not much to say in CSS. I will still use SASS/SCSS,follow BEM-IT convention, OO structure, naming classes as close as possible from their target, and that‚Äôs enough to get a long-term, maintainable project.&lt;/p&gt;

&lt;p&gt;I hope that webpacker and postCSS will increase some performances. But as for writing CSS, stick to the few principles above and you‚Äôre done.&lt;/p&gt;

&lt;p&gt;I appreciate inuitCSS a lot, and I will probably use it again.&lt;/p&gt;

&lt;p&gt;But I find the spacing utilities very verbose, and I hope I can switch to another framework like KNACSS the next time.&lt;/p&gt;

&lt;h2 id=&quot;14-i-wont-avoid--rails-administrate&quot;&gt;14. I won‚Äôt avoid : rails-administrate&lt;/h2&gt;

&lt;p&gt;Well this is probably where Rails outperform its competitors. You have a free, intuitive, secured, customizable administration part for free.&lt;/p&gt;

&lt;p&gt;As far as I know, there are no framework with such an advanced admin panel.&lt;/p&gt;

&lt;p&gt;So in my next project, I will avoid &lt;strong&gt;not&lt;/strong&gt; to use it :)&lt;/p&gt;

&lt;h2 id=&quot;15-i-wont-avoid--guys-of-thoughtbot-and-gorails&quot;&gt;15. I won‚Äôt avoid : guys of Thoughtbot and Gorails&lt;/h2&gt;

&lt;p&gt;Well, I don‚Äôt know how to thanks them enough. Their guides are invaluable and helped me to get things done.&lt;/p&gt;

&lt;p&gt;There are others of course, but I can‚Äôt remember of each so I just want to thanks the community a lot&lt;/p&gt;

&lt;p&gt;üòçüòçüòç&lt;/p&gt;

&lt;p&gt;David.&lt;/p&gt;

</description>
        <pubDate>Wed, 27 May 2020 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/mistakes-i-will-avoid-in-my-next-rails-project/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/mistakes-i-will-avoid-in-my-next-rails-project/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>My beloved, low-tech stack</title>
        <description>&lt;p&gt;While writing a web application for the French National Employment Center, I have longly considered each options that would achieve :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the highest possible quality&lt;/li&gt;
  &lt;li&gt;at the lowest possible price&lt;/li&gt;
  &lt;li&gt;with a maximized speed of delivery&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the past, I have considered many backend and frontend frameworks.&lt;/p&gt;

&lt;p&gt;By the end of 2018, here is what experience taught me to use for current and next project.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;javascript&quot; href=&quot;#javascript&quot;&gt;Plain old vanillaJS (JavaScript, but ES5)&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Not using ES6 nowadays is probably not something you‚Äôre allowed to claim publicly.&lt;/p&gt;

&lt;p&gt;Sorry then. I appreciate to work with ES6 when I have to, but I‚Äôm more happy when working with ES5.&lt;/p&gt;

&lt;p&gt;ES6 is fine. You have a trap-free, shorter syntax, and modules, and probably other good things.&lt;/p&gt;

&lt;p&gt;The most obvious drawback of ES6 is instrumentation. You need a transpiler that integrates properly with your build tool. Once it starts to be buggy, you spend time on a technical stuff, instead of the business stuff you are paid for.&lt;/p&gt;

&lt;p&gt;The other bad part is langage itself. You have many ways to declare functions, sometimes the ‚Äúreturn‚Äù keyword is allowed to be implicit. That makes debugging and reading code pretty hard.&lt;/p&gt;

&lt;p&gt;ES6 went after ES5, so even an ES6 coder have to know ES5.&lt;/p&gt;

&lt;p&gt;ES6 went after ES5, so ES5 is much more universally known than ES6.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/javascript-the-good/9780596517748/&quot;&gt;‚ÄúThe bad parts‚Äù&lt;/a&gt; of plain old JavaScript are extremely easy to prevent with a good linter.&lt;/p&gt;

&lt;p&gt;The use of separate modules with ES6 is really nice, but I didn‚Äôt feel the need for it at any point of the project. Polluting the global scope will actually only pollute &lt;em&gt;one&lt;/em&gt; tab of &lt;em&gt;one&lt;/em&gt; browser of &lt;em&gt;one&lt;/em&gt; client, so I can only laugh about that weakpoint, in comparison of time NOT spent over-instrumenting my project.&lt;/p&gt;

&lt;p&gt;Now the important point is : &lt;strong&gt;there is nothing you can do with ES6 that you can‚Äôt with ES5.&lt;/strong&gt; (Please, see next paragraph if you wanted to tell me ‚Äúbut the API is much more important!‚Äù)&lt;/p&gt;

&lt;p&gt;Even babel-compatible, oriented-object programming &lt;a href=&quot;https://github.com/WebReflection/classtrophobic-es5&quot;&gt;can be nicely achieved with ES5.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ES6 is nice, but I loose stability of the build and universality by using it, without any significant gain anywhere.&lt;/p&gt;

&lt;p&gt;So I‚Äôm back to a low-tech JavaScript technology.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;lodash&quot; href=&quot;#lodash&quot;&gt;Lodash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Please stop to say Lodash is no more needed because of future version of JavaScript. The high number of primitives available will never be reached in the core language, so instead of losing time reinventing the wheel, I reuse work of others.&lt;/p&gt;

&lt;p&gt;I know Lodash ‚Äúas-is‚Äù doesn‚Äôt mean ‚Äúpure‚Äù functional programming, but I really don‚Äôt care. I never had an algorithm that required such a level of so-called ‚Äúpurity‚Äù. Properly chaining primitives are often more than enough to get things done. &lt;a href=&quot;https://github.com/1024pix/pix/blob/v2.2.0/mon-pix/app/utils/value-as-array-of-boolean.js&quot;&gt;Here&lt;/a&gt; is one of the most complicated function I‚Äôve ever written. Nothing fancy, isn‚Äôt it ?&lt;/p&gt;

&lt;p&gt;Lodash can be extended, so most of the time, even if the core team decided not to include a feature, someone else wrote an extension that is publicly available on GitHub. The ‚Äúcount‚Äù function for example is missing but easy to &lt;a href=&quot;https://github.com/lodash/lodash/issues/702#issuecomment-236617831&quot;&gt;retrieve&lt;/a&gt; and extend.&lt;/p&gt;

&lt;p&gt;Is Lodash a technology of the past ? I don‚Äôt know, and I don‚Äôt really care, because I can achieve much more with it that I would without.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;jQuery&quot; href=&quot;#jQuery&quot;&gt;jQuery&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;j-j-jQuery ? Aren‚Äôt you kidding ? I think I just lost 91.2 % of my readers here:)&lt;/p&gt;

&lt;p&gt;jQuery is the most popular JavaScript library, 5 years ago, when I learnt JavaScript seriously, jQuery was more known by students in the room than JavaScript itself !&lt;/p&gt;

&lt;p&gt;A good explanation could be the extreme ease of use of the library.&lt;/p&gt;

&lt;p&gt;Today, it is still a lot more used (at least 10 times) than React, who leads the trend of popularity of JS Frameworks.&lt;/p&gt;

&lt;p&gt;Which means, when you need a special plugin, there a great chances it already exists in jQuery.&lt;/p&gt;

&lt;p&gt;For my current project I needed an accessible (a11y) address picker.&lt;/p&gt;

&lt;p&gt;Well, great news, I didn‚Äôt had to code it, &lt;a href=&quot;http://haltersweb.github.io/Accessibility/autocomplete.html&quot;&gt;someone made it already&lt;/a&gt;‚Ä¶ in jQuery.&lt;/p&gt;

&lt;p&gt;At that time it didn‚Äôt exists (yet) in Angular or React.&lt;/p&gt;

&lt;p&gt;Worse, if a nice Angular component, you can‚Äôt use it in React. Each has its own lifecycle that completly differs from the one of the browser, and of course also differs from others. This is insane.&lt;/p&gt;

&lt;p&gt;Which means for my a11y-addresspicker, if I had an Angular project, but a nice component existed in React, I couldn‚Äôt use it for my projet. Duh ??&lt;/p&gt;

&lt;p&gt;Every new fancy JavaScript framework launched since Backbone in 2011 failed to become ‚Äúthe new web component standard library‚Äù. Even the official, w3c based, web component is not much used.&lt;/p&gt;

&lt;p&gt;jQuery, despite never explicitly being fancy, has always been the &lt;strong&gt;de-facto&lt;/strong&gt; standard web component library.&lt;/p&gt;

&lt;p&gt;Moreover, jQuery do not try to have a lifecycle on top of the lifecycle of the browser.&lt;/p&gt;

&lt;p&gt;With jQuery you have gigatons of free, customizable, reusable web components.&lt;/p&gt;

&lt;p&gt;The only case where jQuery can turn into bloated, spaghetti code, is when you try to have a lot of custom interactivity on one web page.&lt;/p&gt;

&lt;p&gt;In this case, see paragraph below :)&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;Redux&quot; href=&quot;#Redux&quot;&gt;Redux&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This is the only exception of this list. Redux is a quite recent technology, mostly used in combination with React. This is a mistake.  Use it in conjunction with jQuery, and you‚Äôll save quite a few weeks per month.&lt;/p&gt;

&lt;p&gt;On the most interactive page of my current project, I gave a decent try to jQuery (alone), VueJS, KnockoutJS, and gave StimulusJS a chance.&lt;/p&gt;

&lt;p&gt;On previous project, I have worked with React, Ember, Angular, Backbone.&lt;/p&gt;

&lt;p&gt;I ended up with Redux + jQuery. Why ?&lt;/p&gt;

&lt;p&gt;Speed and stability.&lt;/p&gt;

&lt;p&gt;For SEO and performance purposes, I needed the HTML to be rendered by the server. This eliminates the nice &lt;strong&gt;EmberJS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;StimulusJS&lt;/strong&gt; was too new to try, moreover, it forces you to use ES6 where I don‚Äôt want to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KnockoutJS&lt;/strong&gt;, when used in conjunction with Knockout-pre-rendered, has the same philosophy as StimulusJS : a JavaScript for the HTML you already have.  Knockout was really nice and quick to write, but really harder to read and debug. Moreover, there is no centralization of the state, which makes really hard to reason about state and transition, and state restoration was really painful. I dropped Knockout from the project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VueJS&lt;/strong&gt; has an awesome ubiquitous property. However SSR is still immature. And it doesn‚Äôt work well with pre-rendered HTML.&lt;/p&gt;

&lt;p&gt;Moreover, if you have read paragraph above about jQuery, you know I don‚Äôt want anything that build components with it‚Äôs own lifecycle.&lt;/p&gt;

&lt;p&gt;This eliminates VuesJS and ReactJS.&lt;/p&gt;

&lt;p&gt;However, I had the option of giving &lt;strong&gt;ReactJS&lt;/strong&gt; (with SSR) a chance, but at that point, I encountered my last obstacle : Too much quality. Too much details. Too much files.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say your wardrobe is an ugly, complete mess. You want to store each item properly. You start to add shelfs and drawers. Now it is good-looking. You continue to add shelfs and drawers, until there is one drawer for each sock, one drawer for each shirt, etc. Now the situation is almost as ugly as it was : a complete mess.&lt;/p&gt;

&lt;p&gt;This what I wanted to pointed out. Too much decomposition of components like React/Vue does leads into a tons of independant HTML/CSS/JS widgets, that are hard to navigate between when coding, and maintain altogether.&lt;/p&gt;

&lt;p&gt;I guess there are situation where one drawer per item is required (or React wouldn‚Äôt reach that level of success), but for the everyday businness : use Redux.&lt;/p&gt;

&lt;p&gt;With Redux :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Even if the server renders a ton of HTML, you can move only the parts that requires to move, instead of divising each HTML part into a component (React, or Vue component, or whatever).&lt;/li&gt;
  &lt;li&gt;The state is completly centralized into a single, plain JSON object.&lt;/li&gt;
  &lt;li&gt;The flow is &lt;strong&gt;completly intuitive, easy to follow, easy to debug, easy to test.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;This is incredibly easy to write. The API is as simple as A-B-C. You can be a Redux expert within a day. Really. Who can pretend to be a Backbone or React expert in a few hours?&lt;/li&gt;
  &lt;li&gt;(Correlated) It‚Äôs so easy that even the intern with little Knowledge of ES5 can help you to build the front-end part.&lt;/li&gt;
  &lt;li&gt;You can still use your favorite backend technology, no need to separate frontend and backend into 2 separate teams.&lt;/li&gt;
  &lt;li&gt;You can tackle &lt;strong&gt;any&lt;/strong&gt; complexity on the front-end. It was still possible, but really harder with older tools like BackboneJS or KnockoutJS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can see no real drawback.&lt;/p&gt;

&lt;p&gt;Maybe you end up with a JavaScript file (per page/url) that is maybe not as elegant as the one you can find in a React component, but you spare so much time and energy without sacrifing speed, stability. Top of the pop, &lt;strong&gt;you don‚Äôt use anything that breaks the brower‚Äôs flow.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;IDE&quot; href=&quot;#IDE&quot;&gt;Keyboard-based IDE&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I won‚Äôt name the IDE I‚Äôm using, because it‚Äôs not the point.&lt;/p&gt;

&lt;p&gt;I use an IDE that allow me to do &lt;strong&gt;everything with the keyboard&lt;/strong&gt;. It‚Äôs a huge relief for the mind when you don‚Äôt have to point something with the mouse‚Äôs cursor.&lt;/p&gt;

&lt;p&gt;Apart from syntaxic coloration and linting, I avoid to give the IDE too much reponsibilities. The more you ‚Äúintegrate‚Äù things inside the IDE (‚ÄúI‚Äù is for ‚Äúintegrated‚Äù), the more unstable tool you have. Then you spend time on your problems, instead of helping your customers to solve their problems.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;Ruby&quot; href=&quot;#Ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I code the backend with Ruby.&lt;/p&gt;

&lt;p&gt;It‚Äôs &lt;strong&gt;not&lt;/strong&gt; a fantastic langage, but it‚Äôs oriented-object enough, and functional oriented enough, to get things done quickly.&lt;/p&gt;

&lt;p&gt;The bad parts are ‚Äúfunctions not usable as first-class citizens‚Äù. Which means I have to create lambda, block and proc if I want to go for a walk with my tiny function. Ahem. Not good.&lt;/p&gt;

&lt;p&gt;The syntax is easy‚Ä¶ once you spent some weeks with it. I would have prefered a C-based syntax which is more world-wide known.&lt;/p&gt;

&lt;p&gt;Fortunately, the API is wide, consistent, and developer-friendly -  which is, this time, a good point.&lt;/p&gt;

&lt;p&gt;Lastly, Ruby is virtually unused outside the Ruby-on-Rails space. Which is a bad thing. I would have prefered a Python or PHP or Java ‚Äúon Rails‚Äù, which would have been better in a Human Resource point of view.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;Rails&quot; href=&quot;#Rails&quot;&gt;Ruby-on-Rails&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;A slow and old framework. Not kidding here, this is actually what I‚Äôm thinking about it.&lt;/p&gt;

&lt;p&gt;But still unbeaten when it‚Äôs time to get things done.&lt;/p&gt;

&lt;p&gt;I‚Äôm still astonished to see every new framework (backend or frontend) delivered &lt;strong&gt;without&lt;/strong&gt; console, pre-defined environments, database migration manager, efficient default build and testing tool, efficient admin plugins, and, very importantly, an opinionated directory structure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If only one of these features is missing, you add tons of pressure and unstability on the technical team&lt;/strong&gt;, who is then unable to focus quickly enough business part - or not at a reasonnable price.&lt;/p&gt;

&lt;p&gt;Now, here is probably a question for Quora or Meta-Stackoverflow.&lt;/p&gt;

&lt;p&gt;I‚Äôm not completly sure why ‚Äúnew‚Äù didn‚Äôt mean ‚Äúget things done more quickly than the stuff that was here before‚Äù.&lt;/p&gt;

&lt;p&gt;NodeJs brought use more universality by bringing JS to the backend, but failed to deliver a (sufficiently and widely backed by community) framework to get things done quickly.&lt;/p&gt;

&lt;p&gt;Phoenix/Elixir brought us more rendering speed and functional programming, without being mature enough on the ‚Äúget things done‚Äù part.&lt;/p&gt;

&lt;p&gt;ReactJS focused on the ‚Äúfront-end‚Äù part, MeteorJS focused on the ‚Äúreal time‚Äù part, etc.&lt;/p&gt;

&lt;p&gt;No one now focuses on ‚Äúget thing done quickly‚Äù part, and I have no clear answer why history didn‚Äôt go into this direction.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;Stackoverflow&quot; href=&quot;#Stackoverflow&quot;&gt;Stackoverflow, and Slack-overflow&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Stackoverflow has 10 years this month, and it didn‚Äôt lost it‚Äôs hype actually. Then, it‚Äôs a bit weird to see him in this list, but it‚Äôs an important part of my everyday stack. Sometimes I use a slack channel instead, but just learn to isolate a problem and ask clearly, unambiguously on Stackoverflow, and you‚Äôll be fine for a while :)&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;test&quot; href=&quot;#test&quot;&gt;Test last&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Again, this is not something you are allowed to claim publicly.&lt;/p&gt;

&lt;p&gt;I love to test something &lt;em&gt;after&lt;/em&gt; the feature is released. The lacking test often ends up in the technical debt, which is paid off as soon as possible. &lt;strong&gt;The business teams is educated and know about the tech debt.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thus, I‚Äôm ensured to test with the minimum possible effort.&lt;/p&gt;

&lt;p&gt;I‚Äôm not saying I‚Äôm never testing anything. I have currently between 700 and 800 automated tests, frontend and backend alltogether. My code-to-test ratio is 1:2.1, which is &lt;a href=&quot;https://stackoverflow.com/a/1205695/2595513&quot;&gt;a good average&lt;/a&gt;. More importantly, I‚Äôm confident enough about the application.&lt;/p&gt;

&lt;p&gt;I hugely rely on unit testing on the critical parts of the system, making them sometimes redundant if necessary.&lt;/p&gt;

&lt;p&gt;Some non-critical part are left with an integration test that perfectly does the job.&lt;/p&gt;

&lt;p&gt;Some parts are left to a manual testing, because automating it would cost too much. For example, the result of the ‚Äúprint this page‚Äù button is virtually untestable.&lt;/p&gt;

&lt;p&gt;I use TDD sometimes, when  the &lt;em&gt;how&lt;/em&gt; (the system under test) is known before to code it.&lt;/p&gt;

&lt;p&gt;But, more often, I test the thing &lt;strong&gt;after&lt;/strong&gt; I code the thing. I code the smallest possible stuff, I do the ugly manual check in the browser, then I commit/push it, until I release a &lt;strong&gt;draft&lt;/strong&gt; version that I can widely discuss with my Product Owner (abbreviated PO).&lt;/p&gt;

&lt;p&gt;Once the discussion is over, I trash some part of the code (or features), I keep some other parts. I submit it again to the PO.&lt;/p&gt;

&lt;p&gt;And so on.&lt;/p&gt;

&lt;p&gt;Until he/she‚Äôs satisfied with the draft, I have to consider if unit, or integration, or manual testing is the most appropriate thing.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;css&quot; href=&quot;#css&quot;&gt;CSS&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Generally speaking, new CSS tools and conventions do not occur very often.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; + &lt;a href=&quot;https://github.com/inuitcss/inuitcss&quot;&gt;InuitCSS&lt;/a&gt; is ok if you work with a UI designer, &lt;a href=&quot;https://getbootstrap.com/docs/4.1/getting-started/introduction/&quot;&gt;Bootstrap 4&lt;/a&gt; + Sass is ok if you don‚Äôt have an UI designer.&lt;/p&gt;

&lt;p&gt;I tend to always prefer a low-tech solution for each problem I encounter, that also apply for CSS. For example, most of the grid layouts are now flexbox-based. This is not a good thing.&lt;/p&gt;

&lt;p&gt;This tend to eliminate older material, even for displaying simple things. I use flexboxes only for vertical alignment, for everything else there are no obvious reasons to use them.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;build&quot; href=&quot;#build&quot;&gt;Unknown build tool&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Do you know webpack ? It‚Äôs probably a bad tool because the name ‚Äúwebpack‚Äù is known. Which means you probably spent time to tweak it.&lt;/p&gt;

&lt;p&gt;I rely on the build tools of my framework, whose job is to compile assets properly, and build backend dependencies properly.&lt;/p&gt;

&lt;p&gt;I copy/paste my frontend 3rd-party dependencies into my project, then I commit and push them into the project‚Äôs GitHub repository.&lt;/p&gt;

&lt;p&gt;Very Ugly‚Ñ¢ right ?&lt;/p&gt;

&lt;p&gt;No CDN. No bower, gulp, webpack, and so on. I removed a lot of complexity in the project by letting the framework do what it is already supposed to do.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;conclusion&quot; href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Doing things ‚Äúthe old way‚Äù often mean stability and productivity. Of course criticism should not be abandoned, and sometimes a new tool could mean something great for your project. But be aware that this is the exception, not the rule.&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Sep 2018 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/my-beloved-low-tech-stack/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/my-beloved-low-tech-stack/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>StimulusJS with plain old JavaScript</title>
        <description>&lt;h2 id=&quot;stimulusjs&quot;&gt;StimulusJS&lt;/h2&gt;

&lt;p&gt;StimulusJS is a new Javascript framework from Basecamp. It‚Äôs a framework for &lt;em&gt;already rendered DOM&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I plan to write an article about the tool, as if &lt;a href=&quot;https://github.com/stimulusjs/stimulus/blob/master/handbook/00_the_origin_of_stimulus.md&quot;&gt;some people already did&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;make-it-work-with-plain-old-javascript&quot;&gt;Make it work with plain old Javascript&lt;/h2&gt;

&lt;p&gt;StimulusJS is to be used with advanced ES6 class features.&lt;/p&gt;

&lt;p&gt;This is why it doesn‚Äôt work yet without a proper build system, the documentation &lt;a href=&quot;https://github.com/stimulusjs/stimulus/issues/99&quot;&gt;needs to be updated on that point&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You need either Webpack, or Babel with a special configuration, or Coffeescript (which also transpile into ES3).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To be able to be used in any web project&lt;/strong&gt;, StimulusJS needs the ability to let the developper use it in plain old Javascript.&lt;/p&gt;

&lt;h2 id=&quot;the-hack&quot;&gt;The hack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://microjs.com/#class&quot;&gt;All class-related libraries&lt;/a&gt; for Javascript are very nice, but are neither compatible with each other, nor with ES6.&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;a href=&quot;https://github.com/WebReflection/classtrophobic-es5&quot;&gt;Classtrophobic&lt;/a&gt; does the job. 
It allow the developer to declare classes in plain old Javascript, that are compatible with the ones generated by Babel.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bdavidxyz/stimulus-with-javascript&quot;&gt;Github repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bdavidxyz.github.io/stimulus-with-javascript/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just insert &lt;a href=&quot;https://github.com/WebReflection/classtrophobic-es5&quot;&gt;Classtrophobic&lt;/a&gt; amongst the scripts, and the &lt;a href=&quot;https://stimulusjs.org/handbook/hello-stimulus&quot;&gt;code example&lt;/a&gt; of StimulusJS works with very little adaptation:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Stimulus Sandbox&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./classtrophobic-es5.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./stimulus.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello.name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;click-&amp;gt;hello#greet&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      Greet in the console
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stimulus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stimulus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nameTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello : &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 11 Feb 2018 00:00:00 +0100</pubDate>
        <link>http://bdavidxyz.com/blog/stimulusjs-with-javascript/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/stimulusjs-with-javascript/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Web scraping as a service</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://bdavidxyz.github.io/ask-the-dude/&quot;&gt;Scrapped website is here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bdavidxyz/web-scraping-as-a-service&quot;&gt;Final code is here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today we‚Äôll study how to create a web service that is able to scrape the web.
Some requirements could be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ability to extract data from DOM and return it,&lt;/li&gt;
  &lt;li&gt;Ability to make some conditional browsing,&lt;/li&gt;
  &lt;li&gt;Ability to create a job, with params,&lt;/li&gt;
  &lt;li&gt;Ability to retrieve result of this time-consuming job.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The stack relies on big classics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;NodeJS&lt;/li&gt;
  &lt;li&gt;Git&lt;/li&gt;
  &lt;li&gt;NightmareJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the latter : 2 years ago I tried SpookyJS, but I found it quite complicated. Spooky is now not so active, and there is the excellent NightmareJS as a replacement : it allows us to drive a headless browser in a trickless, intuitive way.&lt;/p&gt;

&lt;h2 id=&quot;the-website-we-will-scrape&quot;&gt;The website we will scrape&lt;/h2&gt;

&lt;p&gt;We will scrape one of the most technology-advanced AI application ever : &lt;strong&gt;ask-the-dude&lt;/strong&gt; : &lt;a href=&quot;https://bdavidxyz.github.io/ask-the-dude/&quot;&gt;see it here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can ask the dude any question :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/toutuncafe/image/upload/v1502292004/intro_nwturw.png&quot; alt=&quot;Ask any question&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The dude takes time to answer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/toutuncafe/image/upload/v1502366616/wait_w4yho5.png&quot; alt=&quot;Take time&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The dude always reply&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/toutuncafe/image/upload/v1502291991/yes_gmmd2z.png&quot; alt=&quot;Answer is yes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Answer may vary, according to the question&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/toutuncafe/image/upload/v1502291978/no_rvxwtv.png&quot; alt=&quot;Answer is no&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you forget the trailing ‚Äú?‚Äù, you will have no answer, but in this case, the dude gives you the opportunity to display a random quote.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/toutuncafe/image/upload/v1502291984/error_hzaeue.png&quot; alt=&quot;Answer is error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pretty incredible, isn‚Äôt it ?&lt;/p&gt;

&lt;h2 id=&quot;a-bad-news&quot;&gt;A bad news&lt;/h2&gt;

&lt;p&gt;Unfortunately, the ignoble codeur didn‚Äôt release any API of ‚Äúthe dude.‚Äù&lt;/p&gt;

&lt;p&gt;Which means you can‚Äôt access to ‚Äúthe dude‚Äù programmatically. The only way to get this API is to create a web service that scrapes ‚Äúthe dude‚Äù.
The API we will create&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;POST /ask&lt;/strong&gt; : Ask a question to the dude. The question is in the body of the request. The API replies ‚ÄúOK‚Äù to acknowledge the question, but is unable to answer immediately (remember the dude may take time to think about your question and reply properly).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GET /get-answer-to?q=&lt;/strong&gt; : You can use this endpoint a few seconds after the POST : you will get the answer to the question that match with param q.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GET /all-questions&lt;/strong&gt; : display all questions already asked, with their associated answers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;quickstart&quot;&gt;Quickstart&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; node &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
v6.9.5
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; git &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
git version 2.7.2
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; git clone git@github.com:bdavidxyz/web-scraping-as-a-service.git
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;web-scraping-as-a-service
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can open it at &lt;a href=&quot;http://localhost:5000/&quot;&gt;http://localhost:5000/&lt;/a&gt;, a welcome message should be printed if everything installed correctly.&lt;/p&gt;

&lt;p&gt;Good ! Now our service is ready to be tested.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open Chrome&lt;/li&gt;
  &lt;li&gt;Open &lt;a href=&quot;http://code.jquery.com/&quot;&gt;http://code.jquery.com/&lt;/a&gt;, ‚Äî we will use some simple jQuery code to test our service&lt;/li&gt;
  &lt;li&gt;Open the console from there (Cmd+Alt+i for Mac users, F12 for Windows users)&lt;/li&gt;
  &lt;li&gt;Copy/paste the following code snippets&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:5000/ask&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Do you like butter ?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‚ÄúOK‚Äù should be outputted. Wait a few seconds, then&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:5000/get-answer-for?q=Do you like butter ?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should have the answer to the question.
Try now to get an answer to a question you never asked :&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:5000/get-answer-for?q=WTF ?&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also print all questions&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:5000/all-questions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;h3 id=&quot;ask-a-question&quot;&gt;Ask a question&lt;/h3&gt;

&lt;p&gt;The relevant part is here : &lt;a href=&quot;https://github.com/bdavidxyz/web-scraping-as-a-service/blob/master/index.js#L27-L72&quot;&gt;https://github.com/bdavidxyz/web-scraping-as-a-service/blob/master/index.js#L27-L72&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See that NightmareJS is pretty intuitive : you can chain basic instructions very easily. However the famous JS pyramid nightmare (ahem), cannot be completely avoided : once you start to evaluate anything on the page, the result of this evaluation is wrapped in a promise.&lt;/p&gt;

&lt;p&gt;You have to be &lt;strong&gt;very careful&lt;/strong&gt; about these 3 things :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bdavidxyz/web-scraping-as-a-service/blob/master/index.js#L50&quot;&gt;Don‚Äôt forget&lt;/a&gt; the keyword ‚Äúreturn‚Äù in front of the nightmare instance inside the promise, or chaining of promises will not occur.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bdavidxyz/web-scraping-as-a-service/blob/master/index.js#L38&quot;&gt;Don‚Äôt forget&lt;/a&gt; to re-instantiate NightmareJS on every request.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bdavidxyz/web-scraping-as-a-service/blob/master/index.js#L63&quot;&gt;Don‚Äôt forget&lt;/a&gt; to end your nightmare instance once you used it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that in this example, you can achieve conditional browsing : based on the result of a first evaluation, you can reuse the nightmare instance and scrape the web page again.&lt;/p&gt;

&lt;h3 id=&quot;other-parts&quot;&gt;Other parts&lt;/h3&gt;

&lt;p&gt;Great ! Who can do more can do less.&lt;/p&gt;

&lt;p&gt;The two other endpoints /get-answer-to?q= and /all-questions don‚Äôt use NightmareJS, they are simple, self-describing ExpressJS endpoints.&lt;/p&gt;

&lt;h2 id=&quot;concluding-thoughts&quot;&gt;Concluding thoughts&lt;/h2&gt;

&lt;p&gt;We have now :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A completely free way to scrape any website, for free,&lt;/li&gt;
  &lt;li&gt;A way to APIfy any website that is not accessible by any other mean than a web browser,&lt;/li&gt;
  &lt;li&gt;A way to create some background job,&lt;/li&gt;
  &lt;li&gt;A way to do some conditional browsing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Possible improvements :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You can deploy the service to a service like Heroku to make your API accessible from anywhere.&lt;/li&gt;
  &lt;li&gt;I admit that this doesn‚Äôt scale very well, for intensive tasks you may want to use more serious background jobs solutions, and polling an API is also not a very good idea. But that‚Äôs enough for today :).&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 08 Aug 2017 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/web-scraping-as-a-service/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/web-scraping-as-a-service/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>How to write a Chrome extension</title>
        <description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The github repository is &lt;a href=&quot;https://github.com/bdavidxyz/basic_chrome_extension&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is the most minimalistic, up-to-date tutorial to build your own plugin. It works as follow :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When you click on the plugin‚Äôs button, it outputs something in the Chrome Dev Tools console,&lt;/li&gt;
  &lt;li&gt;The JS is in a dedicated file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create a directory ‚Äúbasic_chrome_extension‚Äù on your computer.&lt;/li&gt;
  &lt;li&gt;Inside, put the &lt;a href=&quot;https://github.com/bdavidxyz/basic_chrome_extension&quot;&gt;3 files&lt;/a&gt; ‚Äúbackground.js‚Äù, ‚Äúcontent.js‚Äù, and ‚Äúmanifest.json‚Äù.&lt;/li&gt;
  &lt;li&gt;Open Chrome, and open url chrome://extensions.&lt;/li&gt;
  &lt;li&gt;Check checkbox named ‚Äúdeveloper mode‚Äù.&lt;/li&gt;
  &lt;li&gt;Click on button ‚ÄúLoad unpacked extension‚Ä¶‚Äù.&lt;/li&gt;
  &lt;li&gt;Choose the directory ‚Äúbasic_chrome_extension‚Äù.&lt;/li&gt;
  &lt;li&gt;Good ! You should see a fresh, new, grey ‚ÄúB‚Äù icon next to the URL bar.&lt;/li&gt;
  &lt;li&gt;Open any decent website : github.com , (or twitter.com, or whatever :).&lt;/li&gt;
  &lt;li&gt;Open your chrome dev tools console : Press Ctrl+Shift+J (Windows / Linux) or Cmd+Opt+J (Mac).&lt;/li&gt;
  &lt;li&gt;Click on the ‚ÄúB‚Äù icon&lt;/li&gt;
  &lt;li&gt;Ta-da ! You should see ‚ÄúI‚Äôm content.js, man‚Äù in the console each time you press the magic ‚ÄúB‚Äù icon.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;go-further&quot;&gt;Go further&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/extensions/samples&quot;&gt;Chrome samples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/extensions/overview&quot;&gt;Official documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 06 Jun 2017 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/how-to-write-a-chrome-extension/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/how-to-write-a-chrome-extension/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Unit tests vs. Integration tests</title>
        <description>&lt;h2 id=&quot;hows-there-&quot;&gt;How‚Äôs there ?&lt;/h2&gt;

&lt;p&gt;A unit test happens when you test the smallest part of your application is under test, which means : a function.&lt;/p&gt;

&lt;p&gt;If the function under test calls another function, it is an integration test.&lt;/p&gt;

&lt;h2 id=&quot;clich√©s&quot;&gt;Clich√©s&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Unit tests&lt;/strong&gt; are the holy grail of automated testing. You should cover everything with unit test, or you‚Äôre not what can be called a ‚Äúdeveloper‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Integration tests&lt;/strong&gt; are slow, only beginners write such crappy tests, because they are more intuitive to write at first place.&lt;/p&gt;

&lt;h2&gt;&lt;s&gt;Clich√©s&lt;/s&gt;&lt;/h2&gt;

&lt;p&gt;Despite unit-test activists occupy the place on Stackoverflow, numbers of articles show that &lt;strong&gt;&lt;a href=&quot;https://chriskottom.com/blog/2017/04/full-stack-testing-with-rails-system-tests/&quot;&gt;all&lt;/a&gt;&lt;/strong&gt; is &lt;strong&gt;&lt;a href=&quot;http://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf&quot;&gt;not&lt;/a&gt;&lt;/strong&gt; that &lt;strong&gt;&lt;a href=&quot;https://henrikwarne.com/2014/09/04/a-response-to-why-most-unit-testing-is-waste/&quot;&gt;simple&lt;/a&gt;&lt;/strong&gt;. Without googling, simply ask developers around you if they covers everything with unit test, you might be surprised.&lt;/p&gt;

&lt;h2&gt;Coding monopoly &quot;player turn&quot; function&lt;/h2&gt;

&lt;p&gt;This how the call stack of how the ‚Äúplayer_turns‚Äù function of Monopoly game could look like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1494419163/catan2_d3u4aj.png&quot; alt=&quot;Monopoly player turn&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;roll_dice&quot;&gt;roll_dice&lt;/h3&gt;

&lt;p&gt;The first day of your project, you have an automated test that covers the ‚Äúplayer_turn‚Äù function. ‚Äúroll_dice‚Äù is such a classic requirement, that is has already made and tested by another library. Good ! No need of any test right now.&lt;/p&gt;

&lt;h3 id=&quot;move_pawn&quot;&gt;move_pawn&lt;/h3&gt;

&lt;p&gt;Then you write the ‚Äúmove_pawn‚Äù function. It‚Äôs actually just reflecting the output of the ‚Äúroll_dice‚Äù function, which is 12 possibilities (two 6-sided dices). Keep an integration test that covers both roll_dice + move pawn is ok.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Boring.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;pay_stuff&quot;&gt;pay_stuff&lt;/h3&gt;

&lt;p&gt;But one day the boss come to the office and say ‚ÄúHey Alfred, the player may buy something after the pawn has been moved.‚Äù&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Uh-oh.&lt;/strong&gt; You realize that 98 different items could be bought, which makes 98 * 12 cases to cover.&lt;/p&gt;

&lt;p&gt;You can either&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write 12 * 98 = 1176 integration tests.&lt;/li&gt;
  &lt;li&gt;Or write 12 + 98 unit tests, and keep 1 integration test just to ensure every function can talk with each other = 111 automated tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write unit test &lt;strong&gt;often&lt;/strong&gt; (but not always) means &lt;strong&gt;write less code with higher confidence.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Always start to write higher-level integration, they are far easier to write, closer to actual business rules.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make every test go as fast as possible, no matter what kind of test it is. It may require subtle work to get it work for integration test.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the underlying call stack of the function under test suddenly have a combinatory explosion, transfer your integration test to unit test.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If this happen, always keep at least one integration test to ensure the whole stack can properly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The kind of test is not &lt;em&gt;that&lt;/em&gt; important, as long as the description stick to a business rule, understandable by a non coder.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Be pragmatic about the actual value of your test, don‚Äôt be shy to delete/move/update an existing test.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 16 May 2017 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/unit-test-vs-integration-test/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/unit-test-vs-integration-test/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Lessons from an Ember-Node app</title>
        <description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pix.beta.gouv.fr&quot;&gt;Pix&lt;/a&gt; is an &lt;a href=&quot;https://github.com/sgmap/pix&quot;&gt;open-source project&lt;/a&gt; initiated by the French Ministry of education.&lt;/p&gt;

&lt;p&gt;I just spent 6 month on this very new project, here is a feedback as a Javascript developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EmberJS, the good parts.&lt;/strong&gt; 1) Ember is strongly integrated and opinionated : it makes tons of valueless, technicals decisions for you, this feature alone makes a huge difference compared to other SPA frameworks competitors. 2) Ember is very intuitive if you already did some Backbone or Angular before, so assumption that Ember has a high learning curve is simply not true. 3) Ember team is available on Slack, this help is pure gold.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EmberJS, the other parts.&lt;/strong&gt;  1) I felt qUnit is deprecated compared to mocha.  2) ember-data is counter-intuitive, unlike the rest of the framework. 3) Sometimes, Ember fails silently instead of raising an exception 4) testing is not as easy and intuitive as it should, examples available on docs are too gentle. Ember misses a few ‚Äúshowcase‚Äù big open-source project with tons of examples that could help on that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://airtable.com/&quot;&gt;Airtable&lt;/a&gt; is awesome.&lt;/strong&gt; Sorry to talk about a commercial software here, but it saved us so I find quite fair to talk about it. It is a SASS product, comparable to an advanced Google Spreadsheet. It allow the business people to administrate the backend by themselves. You add/remove strongly typed columns on-the-fly without technical skills. It saved the project when the needs of the Product Owner were not well defined, and were moving very fast.
When a project starts, it‚Äôs definetly far better and agile than hand-made or scaffolded admin backend.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NodeJS in the backend is not &lt;em&gt;that&lt;/em&gt; awesome.&lt;/strong&gt; I don‚Äôt really understand ‚Äúthe hype‚Äù around Node. It has a very low time-to-market, has no deep integration nor opinions like Ember or Rails. It took us monthes before to have a really productive stack, and even so, classic requirement like building an authentication system is quite a big challenge. For persistence, we chose not-so-well-known knexJS and bookshelfJS. Figuring out how to make our first ‚Äúmake an update in a SQL database‚Äù was (kind of) a difficult, technical story. It‚Äôs hard to forgive in 2017. Coding everything in an asynchronous way is unsurprisingly harder than the synchronous way, even with ‚ÄúPromises‚Äù.&lt;/p&gt;

&lt;p&gt;Questions‚Ä¶&lt;/p&gt;

&lt;p&gt;Can you do achieve every requirement you want with NodeJS ? Yes.&lt;/p&gt;

&lt;p&gt;Is it fast, ‚Äúenterprise-ready‚Äù, testable, scalable ?&lt;/p&gt;

&lt;p&gt;Yes, yes, yes, and yes.&lt;/p&gt;

&lt;p&gt;But it‚Äôs not ‚Äúsweet‚Äù.&lt;/p&gt;

&lt;p&gt;If this point matters to you, I suggest you &lt;a href=&quot;https://medium.com/the-node-js-collection/why-the-hell-would-you-use-node-js-4b053b94ab8e#.3je1csdwx&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build single page application + API is a long-term reward.&lt;/strong&gt; The number of impacted layers to ‚ÄúGet Things Done‚Äù is actually quite high. Maintenance cost is huge, short-term productivity is badly impacted. Be absolutely sure you need it before you choose it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ES6 is easy.&lt;/strong&gt; Not a big deal if you wrote vanillaJS. It makes code shorter and more robust.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relationship to Product Owner is the ‚Äúhuman‚Äù key to success.&lt;/strong&gt; I have the feeling that would the project be written in PHP or assembler, it would still have been a great success. Once you have a strong mutual confidence, mutual understanding, and benevolent behaviour with your PO and team, the project will succeed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product Owner is unable to create exhaustive acceptance criteria.&lt;/strong&gt; We dreamed about acceptance criteria that could be automagically mapped to automated tests. This is impossible. We had once a single acceptance criteria (written by PO) that was actually converted into more than 100+ automated test.  You simply can‚Äôt ask your PO to write and think about every rules, especially implied rules. It‚Äôs your job as developer to convert requirements into realistic business rules. Just rely on the trustful relationship described above with your PO.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The control of your test suite is the ‚Äútechnical‚Äù key to success.&lt;/strong&gt; Ok, there are plenty of technical aspects other than testing, but I had the feeling that this one is the most important for any project, this one makes no exception. Once you start to feel that every piece of code fall right were it should, and is tested by the right test the right way, both productivity and quality break through the roof.&lt;/p&gt;

&lt;p&gt;For the Single Page App, the development mode is served by a fake server (Ember Mirage), with stubs that only covers the nominal scenario. This mode allow us to write higher-level test, that covers mostly routing and component communication. We also have classic unit test that covers function in isolation, integration tests that covers components in isolation. This rocks.&lt;/p&gt;

&lt;p&gt;For the backend, it‚Äôs a classic approach : integration test are our highest-level, with internet connections cutted by NockJS, everything else falls in the unit test area, with help of mocha / SinonJS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UI/UX must be defined before to write any code.&lt;/strong&gt; The SketchApp/Photoshop/static HMTL prototypes must be completely defined and validated before to write any line of code. If not, you can‚Äôt finish a user story or task. Before we hired a designer, we had to rewrite every piece of functionalities twice or more. Everybody understood the ‚Äúwhat‚Äù, but each member had a different opinion on ‚Äúhow‚Äù. I hope I won‚Äôt do that mistake in my next projects :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Avoid Twitter Bootstrap if you enroll a designer.&lt;/strong&gt; Not using Bootstrap is a mistake if you have no designer. It saves times and energy like no other CSS framework. But once you hired one, drop Bootstrap. We started to fight against the framework to meet designer requirements, which was bad. So now we tend to drop Bootstrap dependency, one component at a time. If you start a fresh new project with a designer in the team, you can pick a lightweight CSS framework like ConciseCSS or KNACSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retrospective is the only mandatory process.&lt;/strong&gt; It doesn‚Äôt matter much if you have a certified Scrum Master or a top-notch Kanban person in your team. But retrospective is a mandatory meeting, IMHO. Where you can debate of the utility of other processes. With it, you can continuously improve atmosphere, productivity, tools, everything you need to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be paid for an open source project Once in your career.&lt;/strong&gt; This rocks. This demonstrate your abilities more than any resume.&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Mar 2017 00:00:00 +0100</pubDate>
        <link>http://bdavidxyz.com/blog/lessons-from-ember-node-app/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/lessons-from-ember-node-app/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>The simplest landing page</title>
        <description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;A demo for the impatients &lt;a href=&quot;https://bdavidxyz.github.io/simplest-startup-starter/&quot;&gt;is available here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are working in a startup, you will probably need a landing page for a marketing campaign under heavy time &amp;amp; budget contraints.&lt;/p&gt;

&lt;p&gt;This means :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;avoid spend time on programming,&lt;/li&gt;
  &lt;li&gt;avoid spend time on design,&lt;/li&gt;
  &lt;li&gt;avoid spend time on graphics (logo, favicon, hero image, etc),&lt;/li&gt;
  &lt;li&gt;avoid spend time on server configuration,&lt;/li&gt;
  &lt;li&gt;avoid spend recurring money (unbounce, strikingly, etc) for an idea you don‚Äôt even know it‚Äôll work or not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IMHO, the best starting point for a landing page, is :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an extremely well crafted copywriting,&lt;/li&gt;
  &lt;li&gt;a deployment solution to get your landing page visible to the world,&lt;/li&gt;
  &lt;li&gt;a robust deployment solution to support strong traffic,&lt;/li&gt;
  &lt;li&gt;a template that loads insanely fast,&lt;/li&gt;
  &lt;li&gt;a template that works insanely well on mobile devices,&lt;/li&gt;
  &lt;li&gt;a mean to chat directly with your customer,&lt;/li&gt;
  &lt;li&gt;a mean to collect email from your customer,&lt;/li&gt;
  &lt;li&gt;a way to track visit on your website,&lt;/li&gt;
  &lt;li&gt;a mean to ‚Äúmake them pay‚Äù.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Don‚Äôt spend more than 1‚Äì2 days on it.&lt;/strong&gt; A very long but interesting explanation is &lt;a href=&quot;https://medium.com/@cliffordoravec/the-no-bs-approach-to-building-your-saas-startups-launch-list-part-2-of-the-epic-guide-to-8cc371be772c#.4f0ptjli9&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;The only thing that should cost you time and energy is copywriting.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Anything else &lt;strong&gt;should be free - and actually is&lt;/strong&gt; , with very low technical skills.&lt;/p&gt;

&lt;p&gt;Here is what I recommend :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you don‚Äôt agree with bullets points above, I suggest you again the reading of this &lt;a href=&quot;https://medium.com/@cliffordoravec/the-no-bs-approach-to-building-your-saas-startups-launch-list-part-2-of-the-epic-guide-to-8cc371be772c#.4f0ptjli9&quot;&gt;‚Äúepic guide‚Äù&lt;/a&gt; which largely motivated this simple template.&lt;/li&gt;
  &lt;li&gt;Write content inside a Google Doc, you should always &lt;a href=&quot;http://jgthms.com/web-design-in-4-minutes/&quot;&gt;start design with content&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Subscribe to &lt;a href=&quot;https://crisp.im&quot;&gt;Crisp.Im&lt;/a&gt;, &lt;a href=&quot;https://analytics.google.com/&quot;&gt;Google Analytics&lt;/a&gt;, &lt;a href=&quot;payfacile.com&quot;&gt;Payfacile&lt;/a&gt;, &lt;a href=&quot;https://formspree.io/&quot;&gt;Formspree&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Go to the &lt;a href=&quot;https://github.com/bdavidxyz/simplest-startup-starter&quot;&gt;GitHub repository&lt;/a&gt; of the raw template and follow instructions.&lt;/li&gt;
  &lt;li&gt;Deploy this raw Template to &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub pages&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;(optional) if you want a custom domain, you can buy it at namecheap.com - the only paying stuff of the tutorial, you can get a decent domain for less than 1$ a year.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 28 Feb 2017 00:00:00 +0100</pubDate>
        <link>http://bdavidxyz.com/blog/the-simplest-landing-page/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/the-simplest-landing-page/</guid>
        
        
        <category>work</category>
        
      </item>
    
  </channel>
</rss>
