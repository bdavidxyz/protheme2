<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>David Boureau - Web development, acquisition</title>
    <description>David Boureau is a web developer based in Paris, France. He has a master in computer  science, works as a full-stack developer mostly in JavaScript and Node.js, as well as Ruby and Java.
</description>
    <link>http://bdavidxyz.com/</link>
    <atom:link href="http://bdavidxyz.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 30 Sep 2018 15:57:17 +0200</pubDate>
    <lastBuildDate>Sun, 30 Sep 2018 15:57:17 +0200</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>My beloved, low-tech stack</title>
        <description>&lt;p&gt;Writing a currently an web application for the French National Employment Center, I have longly considered each options that would achieve :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the highest possible quality&lt;/li&gt;
  &lt;li&gt;at the lowest possible price&lt;/li&gt;
  &lt;li&gt;with a maximized speed of delivery&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the past, I have considered many backend and frontend frameworks.&lt;/p&gt;

&lt;p&gt;End of 2018, here what experience taught me to use for current and next project.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;javascript&quot; href=&quot;#javascript&quot;&gt;Plain old vanillaJS (JavaScript, but ES5)&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Not using ES6 nowadays is probably not something you’re allowed to claim publicly.&lt;/p&gt;

&lt;p&gt;Sorry then. I appreciate to work with ES6 when I have to, but I more happy when working with ES5.&lt;/p&gt;

&lt;p&gt;ES6 is fine. You have a trap-free, shorter syntax, and modules, and probably other good things.&lt;/p&gt;

&lt;p&gt;The most obvious drawback of ES6 is instrumentation. You need a transpiler that integrates properly with your build tool. Once it’s start to be buggy, you spent time on a technical stuff, instead of the business stuff you are paid for.&lt;/p&gt;

&lt;p&gt;The other bad part is langage itself. You have many ways to declare functions, sometimes the “return” keyword is allowed to be implicit. That makes debugging and reading code pretty hard.&lt;/p&gt;

&lt;p&gt;ES6 went after ES5, so even an ES6 coder have to know ES5.&lt;/p&gt;

&lt;p&gt;ES6 went after ES5, so ES5 is much more universally known than ES6.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/javascript-the-good/9780596517748/&quot;&gt;“The bad parts”&lt;/a&gt; of plain old JavaScript are extremely easy to prevent with a good linter.&lt;/p&gt;

&lt;p&gt;The use of separate modules with ES6 is really nice, but I didn’t feel the need for it at any point of the project. Polluting the global scope will actually only pollute &lt;em&gt;one&lt;/em&gt; tab of &lt;em&gt;one&lt;/em&gt; browser of &lt;em&gt;one&lt;/em&gt; client, so I can only laugh about that weakpoint, in comparison of time NOT spent over-instrumenting my project.&lt;/p&gt;

&lt;p&gt;Now the important point is : &lt;strong&gt;there is nothing you can do with ES6 that you can’t with ES5.&lt;/strong&gt; (Please, see next paragraph if you wanted to tell me “but the API is much more important!”)&lt;/p&gt;

&lt;p&gt;Even babel-compatible, oriented-object programming &lt;a href=&quot;https://github.com/WebReflection/classtrophobic-es5&quot;&gt;can be nicely achieved with ES5.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ES6 is nice, but I loose stability of the build and universality by using it, without any significant gain anywhere.&lt;/p&gt;

&lt;p&gt;So I’m back to a low-tech JavaScript technology.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;lodash&quot; href=&quot;#lodash&quot;&gt;Lodash&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Please stop to say Lodash is no more needed because of future version of JavaScript. The high number of primitives available will never be reached in the core language, so instead of loosing time reinventing the wheel, I reuse work of others.&lt;/p&gt;

&lt;p&gt;I know Lodash “as-is” doesn’t mean “pure” functional programming, but I really don’t care. I never had an algorithm that required such a level of so-called “purity”. Properly chaining primitives are often more than enough to get things done. &lt;a href=&quot;https://github.com/1024pix/pix/blob/v2.2.0/mon-pix/app/utils/value-as-array-of-boolean.js&quot;&gt;Here&lt;/a&gt; is one of the most complicated function I’ve ever written. Nothing fancy, isn’t it ?&lt;/p&gt;

&lt;p&gt;Lodash can be extended, so most of the time, even if the core team decided not to include a feature, someone else wrote an extension that is publicly available on GitHub. The “count” function for example is missing but easy to &lt;a href=&quot;https://github.com/lodash/lodash/issues/702#issuecomment-236617831&quot;&gt;retrieve&lt;/a&gt; and extend.&lt;/p&gt;

&lt;p&gt;Is LoDash a technology of the past ? I don’t know, and I don’t really care, because I can achieve much more with it that I would without.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;jQuery&quot; href=&quot;#jQuery&quot;&gt;jQuery&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;j-j-jQuery ? Aren’t you kidding ? I think I just lost 91.2 % of my readers here:)&lt;/p&gt;

&lt;p&gt;jQuery is the most popular JavaScript library, 5 years ago, when I learnt JavaScript seriously, jQuery was more known by students in the room than JavaScript itself !&lt;/p&gt;

&lt;p&gt;A good explanation could be the extreme ease of use of the library.&lt;/p&gt;

&lt;p&gt;Today, it is still a lot more used (at least 10 times) than React, who leads the trend of popularity of JS Frameworks.&lt;/p&gt;

&lt;p&gt;Which means, when you need a special plugin, there a great chances it already exists in jQuery.&lt;/p&gt;

&lt;p&gt;For my current project I needed an accessible (a11y) address picker.&lt;/p&gt;

&lt;p&gt;Well, great news, I didn’t had to code it, &lt;a href=&quot;http://haltersweb.github.io/Accessibility/autocomplete.html&quot;&gt;someone made it already&lt;/a&gt;… in jQuery.&lt;/p&gt;

&lt;p&gt;At that time it didn’t exists (yet) in Angular or React.&lt;/p&gt;

&lt;p&gt;Worse, if a nice Angular component, you can’t use it in React. Each has its own lifecycle that completly differs from the one of the browser, and of course also differs from others. This is insane.&lt;/p&gt;

&lt;p&gt;Which means for my a11y-addresspicker, if I had an Angular project, but a nice component existed in React, I couldn’t use it for my projet. Duh ??&lt;/p&gt;

&lt;p&gt;Every new fancy JavaScript framework launched since Backbone in 2011 failed to become “the new web component standard library”. Even the official, w3c based, web component is not much used.&lt;/p&gt;

&lt;p&gt;jQuery, despite never explicitly being fancy, has always been the &lt;strong&gt;de-facto&lt;/strong&gt; standard web component library.&lt;/p&gt;

&lt;p&gt;Moreover, jQuery do not try to have a lifecycle on top of the lifecycle of the browser.&lt;/p&gt;

&lt;p&gt;With jQuery you have gigatons of free, customizable, reusable web components.&lt;/p&gt;

&lt;p&gt;The only case where jQuery can turn into bloated, spaghetti code, is when you try to have a lot of custom interactivity on one web page.&lt;/p&gt;

&lt;p&gt;In this case, see paragraph below :)&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;Redux&quot; href=&quot;#Redux&quot;&gt;Redux&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This is the only exception of this list. Redux is a quite recent technology, mostly used in combination with React. This is a mistake.  Use it in conjunction with jQuery, and you’ll save quite a few weeks per month.&lt;/p&gt;

&lt;p&gt;On the most interactive page of my current project, I gave a decent try to jQuery (alone), VueJS, KnockoutJS, and gave StimulusJS a chance.&lt;/p&gt;

&lt;p&gt;On previous project, I have worked with React, Ember, Angular, Backbone.&lt;/p&gt;

&lt;p&gt;I ended up with Redux + jQuery. Why ?&lt;/p&gt;

&lt;p&gt;Speed and stability.&lt;/p&gt;

&lt;p&gt;For SEO and performance purposes, I needed the HTML to be rendered by the server. This eliminates the nice &lt;strong&gt;EmberJS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;StimulusJS&lt;/strong&gt; was too new to try, moreover, it forces you to use ES6 where I don’t want to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KnockoutJS&lt;/strong&gt;, when used in conjunction with Knockout-pre-rendered, has the same philosophy as StimulusJS : a JavaScript for the HTML you already have.  Knockout was really nice and quick to write, but really harder to read and debug. Moreover, there is no centralization of the state, which makes really hard to reason about state and transition, and state restoration was really painful. I dropped Knockout from the project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VueJS&lt;/strong&gt; has an awesome ubiquitous property. However SSR is still immature. And it doesn’t work well with pre-rendered HTML.&lt;/p&gt;

&lt;p&gt;Moreover, if you have read paragraph above about jQuery, you know I don’t want anything that build components with it’s own lifecycle.&lt;/p&gt;

&lt;p&gt;This eliminates VuesJS and ReactJS.&lt;/p&gt;

&lt;p&gt;However, I had the option of giving &lt;strong&gt;ReactJS&lt;/strong&gt; (with SSR) a chance, but at that point, I encountered my last obstacle : Too much quality. Too much details. Too much files.&lt;/p&gt;

&lt;p&gt;Let’s say your wardrobe is an ugly, complete mess. You want to store each item properly. You start to add shelfs and drawers. Now it is good-looking. You continue to add shelfs and drawers, until there is one drawer for each sock, one drawer for each shirt, etc. Now the situation is almost as ugly as it was : a complete mess.&lt;/p&gt;

&lt;p&gt;This what I wanted to pointed out. Too much decomposition of components like React/Vue does leads into a tons of independant HTML/CSS/JS widgets, that are hard to navigate between when coding, and maintain altogether.&lt;/p&gt;

&lt;p&gt;I guess there are situation where one drawer per item is required (or React wouldn’t reach that level of success), but for the everyday businness : use Redux.&lt;/p&gt;

&lt;p&gt;With Redux :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Even if the server renders a ton of HTML, you can move only the parts that requires to move, instead of divising each HTML part into a component (React, or Vue component, or whatever).&lt;/li&gt;
  &lt;li&gt;The state is completly centralized into a single, plain JSON object.&lt;/li&gt;
  &lt;li&gt;The flow is &lt;strong&gt;completly intuitive, easy to follow, easy to debug, easy to test.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;This is incredibly easy to write. The API is as simple as A-B-C. You can be a Redux expert within a day. Really. Who can pretend to be a Backbone or React expert in a few hours?&lt;/li&gt;
  &lt;li&gt;(Correlated) It’s so easy that even the intern with little Knowledge of ES5 can help you to build the front-end part.&lt;/li&gt;
  &lt;li&gt;You can still use your favorite backend technology, no need to separate frontend and backend into 2 separate teams.&lt;/li&gt;
  &lt;li&gt;You can tackle &lt;strong&gt;any&lt;/strong&gt; complexity on the front-end. It was still possible, but really harder with older tools like BackboneJS or KnockoutJS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can see no real drawback.&lt;/p&gt;

&lt;p&gt;Maybe you end up with a JavaScript file (per page/url) that is maybe not as elegant as the one you can find in a React component, but you spare so much time and energy without sacrifing speed, stability. Top of the pop, &lt;strong&gt;you don’t use anything that breaks the brower’s flow.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;IDE&quot; href=&quot;#IDE&quot;&gt;Keyboard-based IDE&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I won’t name the IDE I’m using, because it’s not the point.&lt;/p&gt;

&lt;p&gt;I use an IDE that allow me to do &lt;strong&gt;everything with the keyboard&lt;/strong&gt;. It’s a huge relief for the mind when you don’t have to point something with the mouse’s cursor.&lt;/p&gt;

&lt;p&gt;Apart from syntaxic coloration and linting, I avoid to give the IDE too much reponsibilities. The more you “integrate” things inside the IDE (“I” is for “integrated”), the more unstable tool you have. Then you spend time on your problems, instead of helping your customers to solve their problems.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;Ruby&quot; href=&quot;#Ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I code the backend with Ruby.&lt;/p&gt;

&lt;p&gt;It’s &lt;strong&gt;not&lt;/strong&gt; a fantastic langage, but it’s oriented-object enough, and functional oriented enough, to get things done quickly.&lt;/p&gt;

&lt;p&gt;The bad parts are “functions not used as first-class citizens”. Which means I have to create lambda, block and proc if I want to go for a walk with my tiny function. Ahem. Not good.&lt;/p&gt;

&lt;p&gt;The syntax is easy… once you spent some weeks with it. I would have prefered a C-based syntax which is more world-wide known.&lt;/p&gt;

&lt;p&gt;Fortunately, the API is wide, consistent, and developer-friendly -  which is, this time, a good point.&lt;/p&gt;

&lt;p&gt;Lastly, Ruby is virtually unused outside the Ruby-on-Rails space. Which is a bad thing. I would have prefered a Python or PHP or Java “on Rails”, which would have been better in a Human Resource point of view.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;Rails&quot; href=&quot;#Rails&quot;&gt;Ruby-on-Rails&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;A slow and old framework. Not kidding here, this is actually what I’m thinking about it.&lt;/p&gt;

&lt;p&gt;But still unbeaten when it’s time to get things done.&lt;/p&gt;

&lt;p&gt;I’m still astonished to see every new framework (backend or frontend) delivered &lt;strong&gt;without&lt;/strong&gt; console, pre-defined environment, migration, efficient default build and testing tool, efficient admin plugins, and, very importantly, an opinionated directory structure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If only one of these feature is missing, you add tons of pressure and unstability on the technical team&lt;/strong&gt;, who is then unable to focus quickly enough business part - or not at a reasonnable price.&lt;/p&gt;

&lt;p&gt;Now, here is probably a question for Quora or Meta-Stackoverflow.&lt;/p&gt;

&lt;p&gt;I’m not completly sure why “new” didn’t mean “get things done more quickly than the stuff that was here before”.&lt;/p&gt;

&lt;p&gt;NodeJs brought use more universality by bringing JS to the backend, but failed to deliver a (sufficiently and widely backed by community) framework to get things done quickly.&lt;/p&gt;

&lt;p&gt;Phoenix/Elixir brought us more rendering speed and functional programming, without being mature enough on the “get things done” part.&lt;/p&gt;

&lt;p&gt;ReactJS focused on the “front-end” part, MeteorJS focused on the “real time” part, etc.&lt;/p&gt;

&lt;p&gt;No one now focuses on “get thing done quickly” part, and I have no clear answer why history didn’t go into this direction.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;Stackoverflow&quot; href=&quot;#Stackoverflow&quot;&gt;Stackoverflow, and Slack-overflow&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Stackoverflow has 10 years this month, and it didn’t lost it’s hype actually. Then, it’s a bit weird to see him in this list, but it’s an important part of my everyday stack. Sometimes I use a slack channel instead, but just learn to isolate a problem and ask clearly, unambiguously on Stackoverflow, and you’ll be fine for a while :)&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;test&quot; href=&quot;#test&quot;&gt;Test last&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Again, this is not something you are allowed to claim publicly.&lt;/p&gt;

&lt;p&gt;I love to test something &lt;em&gt;after&lt;/em&gt; the feature is released. The lacking test often ends up in the technical debt, which is paid off as soon as possible. &lt;strong&gt;The business teams is educated and know about the tech debt.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thus, I’m ensured to test with the minimum possible effort.&lt;/p&gt;

&lt;p&gt;I’m not saying I’m never testing anything. I have currently between 700 and 800 automated tests, frontend and backend alltogether. My code-to-test ratio is 1:2.1, which is https://stackoverflow.com/a/1205695/2595513 a good average. More importantly, I’m confident enough about the application.&lt;/p&gt;

&lt;p&gt;I hugely rely on unit testing on the critical parts of the system, making them sometimes redundant if necessary.&lt;/p&gt;

&lt;p&gt;Some non-critical part are left with an integration test that perfectly does the job.&lt;/p&gt;

&lt;p&gt;Some parts are left to a manual testing, because automating it would cost too much. For example, the result of the “print this page” button is virtually untestable.&lt;/p&gt;

&lt;p&gt;I use TDD sometimes, when  the &lt;em&gt;how&lt;/em&gt; (the system under test) is known before to code it.&lt;/p&gt;

&lt;p&gt;But, more often, I test the thing &lt;strong&gt;after&lt;/strong&gt; I code the thing. I code the smallest possible stuff, I do the ugly manual check in the browser, then I commit/push it, until I release a &lt;strong&gt;draft&lt;/strong&gt; version that I can widely discuss with my Product Owner (abbreviated PO). Once the discussion is over, I trash some part of the code, I keep some other parts of the code. I submit it again to the PO. Once he/she’s satisfied with it, I have to consider if unit, or integration, or manual testing is the more appropriate thing &lt;strong&gt;for the release that has been proven to be fine&lt;/strong&gt; to the PO’s eyes.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;css&quot; href=&quot;#css&quot;&gt;CSS&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Generally speaking, new CSS tools and conventions do not occurs very often.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; + &lt;a href=&quot;https://github.com/inuitcss/inuitcss&quot;&gt;InuitCSS&lt;/a&gt; is ok if you work with a UI designer, &lt;a href=&quot;https://getbootstrap.com/docs/4.1/getting-started/introduction/&quot;&gt;Bootstrap 4&lt;/a&gt; + Sass is ok if you don’t have an UI designer.&lt;/p&gt;

&lt;p&gt;I tend to always prefer a low-tech solution for each problem I encounter, that also apply for CSS. For example, most of the grid layouts are now flexbox-based. This is not a good thing.&lt;/p&gt;

&lt;p&gt;This tend to eliminate older material, even for displaying simple things. I use flexboxes only for vertical alignment, for everything else there are no obvious reason to use them.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;build&quot; href=&quot;#build&quot;&gt;Unknown build tool&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Do you know webpack ? It’s probably a bad tool because the name “webpack” is known. Which means you probably spent time to tweak it.&lt;/p&gt;

&lt;p&gt;I rely on the build tools of my framework, whose job is to compile assets properly, and build backend dependencies properly.&lt;/p&gt;

&lt;p&gt;I copy/paste my frontend 3rd-party dependencies into my project, then I commit and push them into the project’s GitHub repository.&lt;/p&gt;

&lt;p&gt;Very Ugly™ right ?&lt;/p&gt;

&lt;p&gt;No CDN. No bower, gulp, webpack, and so on. I removed a lot of complexity in the project by letting the framework do what it is already supposed to do.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;conclusion&quot; href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Doing things “the old way” often mean stability and productivity. Of course criticism should not be abandoned, and sometimes a new tool could mean something great for your project. But be aware that this is the exception, not the rule.&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Sep 2018 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/my-beloved-low-tech-stack/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/my-beloved-low-tech-stack/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>StimulusJS with plain old JavaScript</title>
        <description>&lt;h2 id=&quot;stimulusjs&quot;&gt;StimulusJS&lt;/h2&gt;

&lt;p&gt;StimulusJS is a new Javascript framework from Basecamp. It’s a framework for &lt;em&gt;already rendered DOM&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I plan to write an article about the tool, as if &lt;a href=&quot;https://github.com/stimulusjs/stimulus/blob/master/handbook/00_the_origin_of_stimulus.md&quot;&gt;some people already did&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;make-it-work-with-plain-old-javascript&quot;&gt;Make it work with plain old Javascript&lt;/h2&gt;

&lt;p&gt;StimulusJS is to be used with advanced ES6 class features.&lt;/p&gt;

&lt;p&gt;This is why it doesn’t work yet without a proper build system, the documentation &lt;a href=&quot;https://github.com/stimulusjs/stimulus/issues/99&quot;&gt;needs to be updated on that point&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You need either Webpack, or Babel with a special configuration, or Coffeescript (which also transpile into ES3).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To be able to be used in any web project&lt;/strong&gt;, StimulusJS needs the ability to let the developper use it in plain old Javascript.&lt;/p&gt;

&lt;h2 id=&quot;the-hack&quot;&gt;The hack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://microjs.com/#class&quot;&gt;All class-related libraries&lt;/a&gt; for Javascript are very nice, but are neither compatible with each other, nor with ES6.&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;a href=&quot;https://github.com/WebReflection/classtrophobic-es5&quot;&gt;Classtrophobic&lt;/a&gt; does the job. 
It allow the developer to declare classes in plain old Javascript, that are compatible with the ones generated by Babel.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bdavidxyz/stimulus-with-javascript&quot;&gt;Github repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bdavidxyz.github.io/stimulus-with-javascript/&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just insert &lt;a href=&quot;https://github.com/WebReflection/classtrophobic-es5&quot;&gt;Classtrophobic&lt;/a&gt; amongst the scripts, and the &lt;a href=&quot;https://stimulusjs.org/handbook/hello-stimulus&quot;&gt;code example&lt;/a&gt; of StimulusJS works with very little adaptation:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Stimulus Sandbox&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./classtrophobic-es5.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./stimulus.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello.name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;click-&amp;gt;hello#greet&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      Greet in the console
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stimulus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stimulus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nameTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 11 Feb 2018 00:00:00 +0100</pubDate>
        <link>http://bdavidxyz.com/blog/stimulusjs-with-javascript/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/stimulusjs-with-javascript/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Web scraping as a service</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://bdavidxyz.github.io/ask-the-dude/&quot;&gt;Scrapped website is here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bdavidxyz/web-scraping-as-a-service&quot;&gt;Final code is here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today we’ll study how to create a web service that is able to scrape the web.
Some requirements could be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ability to extract data from DOM and return it,&lt;/li&gt;
  &lt;li&gt;Ability to make some conditional browsing,&lt;/li&gt;
  &lt;li&gt;Ability to create a job, with params,&lt;/li&gt;
  &lt;li&gt;Ability to retrieve result of this time-consuming job.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The stack relies on big classics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;NodeJS&lt;/li&gt;
  &lt;li&gt;Git&lt;/li&gt;
  &lt;li&gt;NightmareJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the latter : 2 years ago I tried SpookyJS, but I found it quite complicated. Spooky is now not so active, and there is the excellent NightmareJS as a replacement : it allows us to drive a headless browser in a trickless, intuitive way.&lt;/p&gt;

&lt;h2 id=&quot;the-website-we-will-scrape&quot;&gt;The website we will scrape&lt;/h2&gt;

&lt;p&gt;We will scrape one of the most technology-advanced AI application ever : &lt;strong&gt;ask-the-dude&lt;/strong&gt; : &lt;a href=&quot;https://bdavidxyz.github.io/ask-the-dude/&quot;&gt;see it here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can ask the dude any question :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/toutuncafe/image/upload/v1502292004/intro_nwturw.png&quot; alt=&quot;Ask any question&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The dude takes time to answer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/toutuncafe/image/upload/v1502366616/wait_w4yho5.png&quot; alt=&quot;Take time&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The dude always reply&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/toutuncafe/image/upload/v1502291991/yes_gmmd2z.png&quot; alt=&quot;Answer is yes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Answer may vary, according to the question&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/toutuncafe/image/upload/v1502291978/no_rvxwtv.png&quot; alt=&quot;Answer is no&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you forget the trailing “?”, you will have no answer, but in this case, the dude gives you the opportunity to display a random quote.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/toutuncafe/image/upload/v1502291984/error_hzaeue.png&quot; alt=&quot;Answer is error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pretty incredible, isn’t it ?&lt;/p&gt;

&lt;h2 id=&quot;a-bad-news&quot;&gt;A bad news&lt;/h2&gt;

&lt;p&gt;Unfortunately, the ignoble codeur didn’t release any API of “the dude.”&lt;/p&gt;

&lt;p&gt;Which means you can’t access to “the dude” programmatically. The only way to get this API is to create a web service that scrapes “the dude”.
The API we will create&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;POST /ask&lt;/strong&gt; : Ask a question to the dude. The question is in the body of the request. The API replies “OK” to acknowledge the question, but is unable to answer immediately (remember the dude may take time to think about your question and reply properly).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GET /get-answer-to?q=&lt;/strong&gt; : You can use this endpoint a few seconds after the POST : you will get the answer to the question that match with param q.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GET /all-questions&lt;/strong&gt; : display all questions already asked, with their associated answers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;quickstart&quot;&gt;Quickstart&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; node &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
v6.9.5
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; git &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
git version 2.7.2
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; git clone git@github.com:bdavidxyz/web-scraping-as-a-service.git
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;web-scraping-as-a-service
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$&amp;gt;&lt;/span&gt; npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can open it at &lt;a href=&quot;http://localhost:5000/&quot;&gt;http://localhost:5000/&lt;/a&gt;, a welcome message should be printed if everything installed correctly.&lt;/p&gt;

&lt;p&gt;Good ! Now our service is ready to be tested.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open Chrome&lt;/li&gt;
  &lt;li&gt;Open &lt;a href=&quot;http://code.jquery.com/&quot;&gt;http://code.jquery.com/&lt;/a&gt;, — we will use some simple jQuery code to test our service&lt;/li&gt;
  &lt;li&gt;Open the console from there (Cmd+Alt+i for Mac users, F12 for Windows users)&lt;/li&gt;
  &lt;li&gt;Copy/paste the following code snippets&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:5000/ask&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Do you like butter ?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“OK” should be outputted. Wait a few seconds, then&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:5000/get-answer-for?q=Do you like butter ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should have the answer to the question.
Try now to get an answer to a question you never asked :&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:5000/get-answer-for?q=WTF ?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also print all questions&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:5000/all-questions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;h3 id=&quot;ask-a-question&quot;&gt;Ask a question&lt;/h3&gt;

&lt;p&gt;The relevant part is here : &lt;a href=&quot;https://github.com/bdavidxyz/web-scraping-as-a-service/blob/master/index.js#L27-L72&quot;&gt;https://github.com/bdavidxyz/web-scraping-as-a-service/blob/master/index.js#L27-L72&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See that NightmareJS is pretty intuitive : you can chain basic instructions very easily. However the famous JS pyramid nightmare (ahem), cannot be completely avoided : once you start to evaluate anything on the page, the result of this evaluation is wrapped in a promise.&lt;/p&gt;

&lt;p&gt;You have to be &lt;strong&gt;very careful&lt;/strong&gt; about these 3 things :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bdavidxyz/web-scraping-as-a-service/blob/master/index.js#L50&quot;&gt;Don’t forget&lt;/a&gt; the keyword “return” in front of the nightmare instance inside the promise, or chaining of promises will not occur.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bdavidxyz/web-scraping-as-a-service/blob/master/index.js#L38&quot;&gt;Don’t forget&lt;/a&gt; to re-instantiate NightmareJS on every request.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bdavidxyz/web-scraping-as-a-service/blob/master/index.js#L63&quot;&gt;Don’t forget&lt;/a&gt; to end your nightmare instance once you used it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that in this example, you can achieve conditional browsing : based on the result of a first evaluation, you can reuse the nightmare instance and scrape the web page again.&lt;/p&gt;

&lt;h3 id=&quot;other-parts&quot;&gt;Other parts&lt;/h3&gt;

&lt;p&gt;Great ! Who can do more can do less.&lt;/p&gt;

&lt;p&gt;The two other endpoints /get-answer-to?q= and /all-questions don’t use NightmareJS, they are simple, self-describing ExpressJS endpoints.&lt;/p&gt;

&lt;h2 id=&quot;concluding-thoughts&quot;&gt;Concluding thoughts&lt;/h2&gt;

&lt;p&gt;We have now :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A completely free way to scrape any website, for free,&lt;/li&gt;
  &lt;li&gt;A way to APIfy any website that is not accessible by any other mean than a web browser,&lt;/li&gt;
  &lt;li&gt;A way to create some background job,&lt;/li&gt;
  &lt;li&gt;A way to do some conditional browsing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Possible improvements :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You can deploy the service to a service like Heroku to make your API accessible from anywhere.&lt;/li&gt;
  &lt;li&gt;I admit that this doesn’t scale very well, for intensive tasks you may want to use more serious background jobs solutions, and polling an API is also not a very good idea. But that’s enough for today :).&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 08 Aug 2017 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/web-scraping-as-a-service/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/web-scraping-as-a-service/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>How to write a Chrome extension</title>
        <description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;The github repository is &lt;a href=&quot;https://github.com/bdavidxyz/basic_chrome_extension&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is the most minimalistic, up-to-date tutorial to build your own plugin. It works as follow :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When you click on the plugin’s button, it outputs something in the Chrome Dev Tools console,&lt;/li&gt;
  &lt;li&gt;The JS is in a dedicated file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create a directory “basic_chrome_extension” on your computer.&lt;/li&gt;
  &lt;li&gt;Inside, put the &lt;a href=&quot;https://github.com/bdavidxyz/basic_chrome_extension&quot;&gt;3 files&lt;/a&gt; “background.js”, “content.js”, and “manifest.json”.&lt;/li&gt;
  &lt;li&gt;Open Chrome, and open url chrome://extensions.&lt;/li&gt;
  &lt;li&gt;Check checkbox named “developer mode”.&lt;/li&gt;
  &lt;li&gt;Click on button “Load unpacked extension…”.&lt;/li&gt;
  &lt;li&gt;Choose the directory “basic_chrome_extension”.&lt;/li&gt;
  &lt;li&gt;Good ! You should see a fresh, new, grey “B” icon next to the URL bar.&lt;/li&gt;
  &lt;li&gt;Open any decent website : github.com , (or twitter.com, or whatever :).&lt;/li&gt;
  &lt;li&gt;Open your chrome dev tools console : Press Ctrl+Shift+J (Windows / Linux) or Cmd+Opt+J (Mac).&lt;/li&gt;
  &lt;li&gt;Click on the “B” icon&lt;/li&gt;
  &lt;li&gt;Ta-da ! You should see “I’m content.js, man” in the console each time you press the magic “B” icon.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;go-further&quot;&gt;Go further&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/extensions/samples&quot;&gt;Chrome samples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/extensions/overview&quot;&gt;Official documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 06 Jun 2017 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/how-to-write-a-chrome-extension/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/how-to-write-a-chrome-extension/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Unit tests vs. Integration tests</title>
        <description>&lt;h2 id=&quot;hows-there-&quot;&gt;How’s there ?&lt;/h2&gt;

&lt;p&gt;A unit test happens when you test the smallest part of your application is under test, which means : a function.&lt;/p&gt;

&lt;p&gt;If the function under test calls another function, it is an integration test.&lt;/p&gt;

&lt;h2 id=&quot;clichés&quot;&gt;Clichés&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Unit tests&lt;/strong&gt; are the holy grail of automated testing. You should cover everything with unit test, or you’re not what can be called a “developer”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Integration tests&lt;/strong&gt; are slow, only beginners write such crappy tests, because they are more intuitive to write at first place.&lt;/p&gt;

&lt;h2&gt;&lt;s&gt;Clichés&lt;/s&gt;&lt;/h2&gt;

&lt;p&gt;Despite unit-test activists occupy the place on Stackoverflow, numbers of articles show that &lt;strong&gt;&lt;a href=&quot;https://chriskottom.com/blog/2017/04/full-stack-testing-with-rails-system-tests/&quot;&gt;all&lt;/a&gt;&lt;/strong&gt; is &lt;strong&gt;&lt;a href=&quot;http://rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf&quot;&gt;not&lt;/a&gt;&lt;/strong&gt; that &lt;strong&gt;&lt;a href=&quot;https://henrikwarne.com/2014/09/04/a-response-to-why-most-unit-testing-is-waste/&quot;&gt;simple&lt;/a&gt;&lt;/strong&gt;. Without googling, simply ask developers around you if they covers everything with unit test, you might be surprised.&lt;/p&gt;

&lt;h2&gt;Coding monopoly &quot;player turn&quot; function&lt;/h2&gt;

&lt;p&gt;This how the call stack of how the “player_turns” function of Monopoly game could look like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1494419163/catan2_d3u4aj.png&quot; alt=&quot;Monopoly player turn&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;roll_dice&quot;&gt;roll_dice&lt;/h3&gt;

&lt;p&gt;The first day of your project, you have an automated test that covers the “player_turn” function. “roll_dice” is such a classic requirement, that is has already made and tested by another library. Good ! No need of any test right now.&lt;/p&gt;

&lt;h3 id=&quot;move_pawn&quot;&gt;move_pawn&lt;/h3&gt;

&lt;p&gt;Then you write the “move_pawn” function. It’s actually just reflecting the output of the “roll_dice” function, which is 12 possibilities (two 6-sided dices). Keep an integration test that covers both roll_dice + move pawn is ok.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Boring.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;pay_stuff&quot;&gt;pay_stuff&lt;/h3&gt;

&lt;p&gt;But one day the boss come to the office and say “Hey Alfred, the player may buy something after the pawn has been moved.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Uh-oh.&lt;/strong&gt; You realize that 98 different items could be bought, which makes 98 * 12 cases to cover.&lt;/p&gt;

&lt;p&gt;You can either&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write 12 * 98 = 1176 integration tests.&lt;/li&gt;
  &lt;li&gt;Or write 12 + 98 unit tests, and keep 1 integration test just to ensure every function can talk with each other = 111 automated tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write unit test &lt;strong&gt;often&lt;/strong&gt; (but not always) means &lt;strong&gt;write less code with higher confidence.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Always start to write higher-level integration, they are far easier to write, closer to actual business rules.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make every test go as fast as possible, no matter what kind of test it is. It may require subtle work to get it work for integration test.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the underlying call stack of the function under test suddenly have a combinatory explosion, transfer your integration test to unit test.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If this happen, always keep at least one integration test to ensure the whole stack can properly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The kind of test is not &lt;em&gt;that&lt;/em&gt; important, as long as the description stick to a business rule, understandable by a non coder.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Be pragmatic about the actual value of your test, don’t be shy to delete/move/update an existing test.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 16 May 2017 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/unit-test-vs-integration-test/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/unit-test-vs-integration-test/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Lessons from an Ember-Node app</title>
        <description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pix.beta.gouv.fr&quot;&gt;Pix&lt;/a&gt; is an &lt;a href=&quot;https://github.com/sgmap/pix&quot;&gt;open-source project&lt;/a&gt; initiated by the French Ministry of education.&lt;/p&gt;

&lt;p&gt;I just spent 6 month on this very new project, here is a feedback as a Javascript developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EmberJS, the good parts.&lt;/strong&gt; 1) Ember is strongly integrated and opinionated : it makes tons of valueless, technicals decisions for you, this feature alone makes a huge difference compared to other SPA frameworks competitors. 2) Ember is very intuitive if you already did some Backbone or Angular before, so assumption that Ember has a high learning curve is simply not true. 3) Ember team is available on Slack, this help is pure gold.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EmberJS, the other parts.&lt;/strong&gt;  1) I felt qUnit is deprecated compared to mocha.  2) ember-data is counter-intuitive, unlike the rest of the framework. 3) Sometimes, Ember fails silently instead of raising an exception 4) testing is not as easy and intuitive as it should, examples available on docs are too gentle. Ember misses a few “showcase” big open-source project with tons of examples that could help on that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://airtable.com/&quot;&gt;Airtable&lt;/a&gt; is awesome.&lt;/strong&gt; Sorry to talk about a commercial software here, but it saved us so I find quite fair to talk about it. It is a SASS product, comparable to an advanced Google Spreadsheet. It allow the business people to administrate the backend by themselves. You add/remove strongly typed columns on-the-fly without technical skills. It saved the project when the needs of the Product Owner were not well defined, and were moving very fast.
When a project starts, it’s definetly far better and agile than hand-made or scaffolded admin backend.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NodeJS in the backend is not &lt;em&gt;that&lt;/em&gt; awesome.&lt;/strong&gt; I don’t really understand “the hype” around Node. It has a very low time-to-market, has no deep integration nor opinions like Ember or Rails. It took us monthes before to have a really productive stack, and even so, classic requirement like building an authentication system is quite a big challenge. For persistence, we chose not-so-well-known knexJS and bookshelfJS. Figuring out how to make our first “make an update in a SQL database” was (kind of) a difficult, technical story. It’s hard to forgive in 2017. Coding everything in an asynchronous way is unsurprisingly harder than the synchronous way, even with “Promises”.&lt;/p&gt;

&lt;p&gt;Questions…&lt;/p&gt;

&lt;p&gt;Can you do achieve every requirement you want with NodeJS ? Yes.&lt;/p&gt;

&lt;p&gt;Is it fast, “enterprise-ready”, testable, scalable ?&lt;/p&gt;

&lt;p&gt;Yes, yes, yes, and yes.&lt;/p&gt;

&lt;p&gt;But it’s not “sweet”.&lt;/p&gt;

&lt;p&gt;If this point matters to you, I suggest you &lt;a href=&quot;https://medium.com/the-node-js-collection/why-the-hell-would-you-use-node-js-4b053b94ab8e#.3je1csdwx&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build single page application + API is a long-term reward.&lt;/strong&gt; The number of impacted layers to “Get Things Done” is actually quite high. Maintenance cost is huge, short-term productivity is badly impacted. Be absolutely sure you need it before you choose it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ES6 is easy.&lt;/strong&gt; Not a big deal if you wrote vanillaJS. It makes code shorter and more robust.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relationship to Product Owner is the “human” key to success.&lt;/strong&gt; I have the feeling that would the project be written in PHP or assembler, it would still have been a great success. Once you have a strong mutual confidence, mutual understanding, and benevolent behaviour with your PO and team, the project will succeed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product Owner is unable to create exhaustive acceptance criteria.&lt;/strong&gt; We dreamed about acceptance criteria that could be automagically mapped to automated tests. This is impossible. We had once a single acceptance criteria (written by PO) that was actually converted into more than 100+ automated test.  You simply can’t ask your PO to write and think about every rules, especially implied rules. It’s your job as developer to convert requirements into realistic business rules. Just rely on the trustful relationship described above with your PO.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The control of your test suite is the “technical” key to success.&lt;/strong&gt; Ok, there are plenty of technical aspects other than testing, but I had the feeling that this one is the most important for any project, this one makes no exception. Once you start to feel that every piece of code fall right were it should, and is tested by the right test the right way, both productivity and quality break through the roof.&lt;/p&gt;

&lt;p&gt;For the Single Page App, the development mode is served by a fake server (Ember Mirage), with stubs that only covers the nominal scenario. This mode allow us to write higher-level test, that covers mostly routing and component communication. We also have classic unit test that covers function in isolation, integration tests that covers components in isolation. This rocks.&lt;/p&gt;

&lt;p&gt;For the backend, it’s a classic approach : integration test are our highest-level, with internet connections cutted by NockJS, everything else falls in the unit test area, with help of mocha / SinonJS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UI/UX must be defined before to write any code.&lt;/strong&gt; The SketchApp/Photoshop/static HMTL prototypes must be completely defined and validated before to write any line of code. If not, you can’t finish a user story or task. Before we hired a designer, we had to rewrite every piece of functionalities twice or more. Everybody understood the “what”, but each member had a different opinion on “how”. I hope I won’t do that mistake in my next projects :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Avoid Twitter Bootstrap if you enroll a designer.&lt;/strong&gt; Not using Bootstrap is a mistake if you have no designer. It saves times and energy like no other CSS framework. But once you hired one, drop Bootstrap. We started to fight against the framework to meet designer requirements, which was bad. So now we tend to drop Bootstrap dependency, one component at a time. If you start a fresh new project with a designer in the team, you can pick a lightweight CSS framework like ConciseCSS or KNACSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retrospective is the only mandatory process.&lt;/strong&gt; It doesn’t matter much if you have a certified Scrum Master or a top-notch Kanban person in your team. But retrospective is a mandatory meeting, IMHO. Where you can debate of the utility of other processes. With it, you can continuously improve atmosphere, productivity, tools, everything you need to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be paid for an open source project Once in your career.&lt;/strong&gt; This rocks. This demonstrate your abilities more than any resume.&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Mar 2017 00:00:00 +0100</pubDate>
        <link>http://bdavidxyz.com/blog/lessons-from-ember-node-app/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/lessons-from-ember-node-app/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>The simplest landing page</title>
        <description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;A demo for the impatients &lt;a href=&quot;https://bdavidxyz.github.io/simplest-startup-starter/&quot;&gt;is available here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are working in a startup, you will probably need a landing page for a marketing campaign under heavy time &amp;amp; budget contraints.&lt;/p&gt;

&lt;p&gt;This means :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;avoid spend time on programming,&lt;/li&gt;
  &lt;li&gt;avoid spend time on design,&lt;/li&gt;
  &lt;li&gt;avoid spend time on graphics (logo, favicon, hero image, etc),&lt;/li&gt;
  &lt;li&gt;avoid spend time on server configuration,&lt;/li&gt;
  &lt;li&gt;avoid spend recurring money (unbounce, strikingly, etc) for an idea you don’t even know it’ll work or not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;IMHO, the best starting point for a landing page, is :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an extremely well crafted copywriting,&lt;/li&gt;
  &lt;li&gt;a deployment solution to get your landing page visible to the world,&lt;/li&gt;
  &lt;li&gt;a robust deployment solution to support strong traffic,&lt;/li&gt;
  &lt;li&gt;a template that loads insanely fast,&lt;/li&gt;
  &lt;li&gt;a template that works insanely well on mobile devices,&lt;/li&gt;
  &lt;li&gt;a mean to chat directly with your customer,&lt;/li&gt;
  &lt;li&gt;a mean to collect email from your customer,&lt;/li&gt;
  &lt;li&gt;a way to track visit on your website,&lt;/li&gt;
  &lt;li&gt;a mean to “make them pay”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Don’t spend more than 1–2 days on it.&lt;/strong&gt; A very long but interesting explanation is &lt;a href=&quot;https://medium.com/@cliffordoravec/the-no-bs-approach-to-building-your-saas-startups-launch-list-part-2-of-the-epic-guide-to-8cc371be772c#.4f0ptjli9&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;The only thing that should cost you time and energy is copywriting.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Anything else &lt;strong&gt;should be free - and actually is&lt;/strong&gt; , with very low technical skills.&lt;/p&gt;

&lt;p&gt;Here is what I recommend :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If you don’t agree with bullets points above, I suggest you again the reading of this &lt;a href=&quot;https://medium.com/@cliffordoravec/the-no-bs-approach-to-building-your-saas-startups-launch-list-part-2-of-the-epic-guide-to-8cc371be772c#.4f0ptjli9&quot;&gt;“epic guide”&lt;/a&gt; which largely motivated this simple template.&lt;/li&gt;
  &lt;li&gt;Write content inside a Google Doc, you should always &lt;a href=&quot;http://jgthms.com/web-design-in-4-minutes/&quot;&gt;start design with content&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Subscribe to &lt;a href=&quot;https://crisp.im&quot;&gt;Crisp.Im&lt;/a&gt;, &lt;a href=&quot;https://analytics.google.com/&quot;&gt;Google Analytics&lt;/a&gt;, &lt;a href=&quot;payfacile.com&quot;&gt;Payfacile&lt;/a&gt;, &lt;a href=&quot;https://formspree.io/&quot;&gt;Formspree&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Go to the &lt;a href=&quot;https://github.com/bdavidxyz/simplest-startup-starter&quot;&gt;GitHub repository&lt;/a&gt; of the raw template and follow instructions.&lt;/li&gt;
  &lt;li&gt;Deploy this raw Template to &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub pages&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;(optional) if you want a custom domain, you can buy it at namecheap.com - the only paying stuff of the tutorial, you can get a decent domain for less than 1$ a year.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 28 Feb 2017 00:00:00 +0100</pubDate>
        <link>http://bdavidxyz.com/blog/the-simplest-landing-page/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/the-simplest-landing-page/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>An exceedingly clean code</title>
        <description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 9 Feb 2017&lt;/strong&gt; : _Today, it is by far my most read article, and also the most hated. I didn’t intend to publish the holy grails of clean code, there is already a whole book for it. As the title implies, the quality is pushed a little too far, and achieve it on every function is probably not so realistic. I tried to explore new ways to make the code more readable, without too much care about performance. You don’t have to agree with / like it :) Take it easy.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The article is written with ES6 for examples, but the article could be applied to other programming languages.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;style type=&quot;text/css&quot;&gt;div.gist-meta{display: none;} div.gist .gist-file{border: none;} div.gist .gist-data{border: none;}&lt;/style&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/74bb653ee49fa849edc8e4037f1b8654.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;F*** what does this function try to…&lt;/li&gt;
  &lt;li&gt;stop, the dev who made it left last week&lt;/li&gt;
  &lt;li&gt;well, since _.zip is used, proposals and checkboxes are probably arrays.&lt;/li&gt;
  &lt;li&gt;good … arrays of what? Didn’t know _.zip, I discovered lodash with this project.&lt;/li&gt;
  &lt;li&gt;and what’s the point of line 4 condition ?&lt;/li&gt;
  &lt;li&gt;I dunno.&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A small, very small JS function of 11 lines turns into a maintenance nightmare. The slightest bug, the slightest recovery, the slightest refactoring costs a lot of time and energy.&lt;/p&gt;

&lt;p&gt;Knowing that any software is counted easily in thousands of lines of code …&lt;/p&gt;

&lt;h2 id=&quot;version-0--do-not-change-anything&quot;&gt;Version 0 : do not change anything&lt;/h2&gt;

&lt;p&gt;And write automated tests. No need to be unit tests written the TDD way. Integration tests written afterwards are just as good enough to begin with. Or acceptance tests.&lt;/p&gt;

&lt;p&gt;Without any test, it’s impossible to improve anything.&lt;/p&gt;

&lt;p&gt;Voluntarily I do not show the unit tests of this function, the purpose of the article is to give an example of documentation by the code.&lt;/p&gt;

&lt;h2 id=&quot;version-1--check-preconditions&quot;&gt;Version 1 : Check preconditions&lt;/h2&gt;

&lt;p&gt;In order to help the reader, while improving the robustness of the code, and to avoid the edge effects, let’s be sure of the input parameters before going further.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/59289f3cd5c817b03e8c31f1c8eb265a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We understand what the input parameters are, but that’s hard. Have you noticed the “!” Exclamation mark ?? No ? So why not write some utility functions that makes it great:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/fcf0c85fcf3df127a0eefd4f8b60c757.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And even better, we use an IDE plugin to get a nice alignment&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/0e4a37b6d0164f40221febba014d6c2f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;There you go ! No need to comment at this stage, it’s clear as water.&lt;/p&gt;

&lt;p&gt;We use Ruby-like code, where each word is placed in the right order to be sure we will able to read the code as in natural language. For example, here one can read in the 2nd line, excluding everything that is not strictly textual:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;if proposals is not array of string return []&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There you go ! Again, no need to comment until then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 1&lt;/strong&gt; : An effective way of fighting the anxiety of “but-what-if-this-happens” (and against the debugging hours!) is to guard against any unexpected parameters by returning an empty value corresponding to expected type. This is the behavior chosen in a majority of cases for lodash / underscore. (For example, returning an empty string if the function returns a String, an empty array if the array must return an Array, etc.).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 2&lt;/strong&gt; : Even a strongly-typed language wouldn’t have solved all problems. The checks on the difference of the array sizes / on the non-empty array would still have taken place.&lt;/p&gt;

&lt;h2 id=&quot;version-2--comment-by-example&quot;&gt;Version 2 : Comment by example&lt;/h2&gt;

&lt;p&gt;Comment the signature of the function. But-that-serves-nothing-if-the-function-is-well-named.&lt;/p&gt;

&lt;p&gt;Not exactly.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/b7488c92e7275216b5bfcef426820158.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;The general idea is: document by example.
    &lt;ul&gt;
      &lt;li&gt;These parameters are relocated in the overall context of the project (for example, it is understood that proposals are proposals or questions posed to the user)&lt;/li&gt;
      &lt;li&gt;By the way the type of parameters of the function are now evident.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Any odd / counterintuitive thing can be reported here. With the help of the word WARNING or XXX in the comments. It’s a bit like Github: do not be afraid to abuse it. There will ALWAYS be issues, always odd thinks in your code, even if you do not like it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;version-3--verticalize-your-code&quot;&gt;Version 3 : Verticalize your code&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;http://stackoverflow.com/a/37770048/2595513&quot;&gt;StackOverflow answer&lt;/a&gt; is a good example of verticalization.&lt;/p&gt;

&lt;p&gt;In our case, the use of &lt;a href=&quot;http://bekk.github.io/functional-js/workshop/02-1-applicative&quot;&gt;applicative programming&lt;/a&gt; make  code greater.&lt;/p&gt;

&lt;p&gt;Even on a very small function, think about what happens when the flow of instruction looks like this&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;svg width=&quot;260px&quot; height=&quot;285px&quot; viewBox=&quot;0 0 260 285&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&lt;defs&gt;&lt;rect id=&quot;path-1&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot;&gt;&lt;/rect&gt;&lt;mask id=&quot;mask-2&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-1&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;rect id=&quot;path-3&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot;&gt;&lt;/rect&gt;&lt;mask id=&quot;mask-4&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-3&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;rect id=&quot;path-5&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot;&gt;&lt;/rect&gt;&lt;mask id=&quot;mask-6&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-5&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;rect id=&quot;path-7&quot; x=&quot;6&quot; y=&quot;6&quot; width=&quot;26&quot; height=&quot;26&quot;&gt;&lt;/rect&gt;&lt;mask id=&quot;mask-8&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;26&quot; height=&quot;26&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-7&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;rect id=&quot;path-9&quot; x=&quot;6&quot; y=&quot;6&quot; width=&quot;26&quot; height=&quot;26&quot;&gt;&lt;/rect&gt;&lt;mask id=&quot;mask-10&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;26&quot; height=&quot;26&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-9&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;/defs&gt;&lt;g id=&quot;A-visual-vocabulary--&quot; stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;g id=&quot;Artboard&quot; transform=&quot;translate(-141.000000, -23.000000)&quot;&gt;&lt;g id=&quot;Making-choices&quot; transform=&quot;translate(141.000000, 23.000000)&quot;&gt;&lt;g id=&quot;decision-point&quot;&gt;&lt;g id=&quot;basic/page-text&quot; transform=&quot;translate(100.000000, 0.000000)&quot;&gt;&lt;use id=&quot;page&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-2)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; xlink:href=&quot;#path-1&quot;&gt;&lt;/use&gt;&lt;text id=&quot;login&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;14.3476562&quot; y=&quot;32.9296875&quot;&gt;do this&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;basic/page-text&quot; transform=&quot;translate(20.000000, 150.000000)&quot;&gt;&lt;use id=&quot;page&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-4)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; xlink:href=&quot;#path-3&quot;&gt;&lt;/use&gt;&lt;text id=&quot;login&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;13.6767578&quot; y=&quot;32.9296875&quot;&gt;do that&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;basic/page-text-2&quot; transform=&quot;translate(180.000000, 150.000000)&quot;&gt;&lt;use id=&quot;page&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-6)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; xlink:href=&quot;#path-5&quot;&gt;&lt;/use&gt;&lt;text id=&quot;product&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;11.5&quot; y=&quot;28&quot;&gt;launch this&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;arrow/connection&quot; transform=&quot;translate(129.000000, 172.500000) rotate(-270.000000) translate(-129.000000, -172.500000) translate(16.500000, 77.500000)&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;path d=&quot;M84.3252772,4.74242424 C83.859262,5.91273569 82.8636364,7.28787879 82.8636364,7.28787879 L90.5,3.89393939 L82.8636364,0.5 C82.8636364,0.5 83.9708907,1.92335529 84.3965901,3.04545455 L64.5,3.04545455 L64.5,4.74242424 L84.3252772,4.74242424 Z M84.5,4.21126578 C84.5387505,4.05322147 84.5606061,3.9051318 84.5606061,3.77213542 C84.5606061,3.64835443 84.5387505,3.51052598 84.5,3.36343266 L84.5,4.21126578 Z&quot; id=&quot;Triangle-1&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M169.325277,4.74242424 C168.859262,5.91273569 167.863636,7.28787879 167.863636,7.28787879 L175.5,3.89393939 L167.863636,0.5 C167.863636,0.5 168.970891,1.92335529 169.39659,3.04545455 L149.5,3.04545455 L149.5,4.74242424 L169.325277,4.74242424 Z M169.5,4.21126578 C169.538751,4.05322147 169.560606,3.9051318 169.560606,3.77213542 C169.560606,3.64835443 169.538751,3.51052598 169.5,3.36343266 L169.5,4.21126578 Z&quot; id=&quot;Triangle-1&quot; transform=&quot;translate(162.500000, 3.893939) scale(-1, 1) translate(-162.500000, -3.893939) &quot;&gt;&lt;/path&gt;&lt;path d=&quot;M84.3252772,164.742424 C83.859262,165.912736 82.8636364,167.287879 82.8636364,167.287879 L90.5,163.893939 L82.8636364,160.5 C82.8636364,160.5 83.9708907,161.923355 84.3965901,163.045455 L64.5,163.045455 L64.5,164.742424 L84.3252772,164.742424 Z M84.5,164.211266 C84.5387505,164.053221 84.5606061,163.905132 84.5606061,163.772135 C84.5606061,163.648354 84.5387505,163.510526 84.5,163.363433 L84.5,164.211266 Z&quot; id=&quot;Triangle-1&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M228.325277,177.742424 C227.859262,178.912736 226.863636,180.287879 226.863636,180.287879 L234.5,176.893939 L226.863636,173.5 C226.863636,173.5 227.970891,174.923355 228.39659,176.045455 L208.5,176.045455 L208.5,177.742424 L228.325277,177.742424 Z M228.5,177.211266 C228.538751,177.053221 228.560606,176.905132 228.560606,176.772135 C228.560606,176.648354 228.538751,176.510526 228.5,176.363433 L228.5,177.211266 Z&quot; id=&quot;Triangle-1&quot; transform=&quot;translate(221.500000, 176.893939) rotate(90.000000) translate(-221.500000, -176.893939) &quot;&gt;&lt;/path&gt;&lt;rect id=&quot;Triangle-1&quot; x=&quot;0&quot; y=&quot;83&quot; width=&quot;66&quot; height=&quot;2&quot;&gt;&lt;/rect&gt;&lt;rect id=&quot;Triangle-1&quot; x=&quot;156&quot; y=&quot;163&quot; width=&quot;66&quot; height=&quot;2&quot;&gt;&lt;/rect&gt;&lt;rect id=&quot;Triangle-1&quot; transform=&quot;translate(65.500000, 83.993827) rotate(-270.000000) translate(-65.500000, -83.993827) &quot; x=&quot;-15&quot; y=&quot;83&quot; width=&quot;161&quot; height=&quot;1.98765432&quot;&gt;&lt;/rect&gt;&lt;rect id=&quot;Triangle-1&quot; transform=&quot;translate(221.500000, 83.993827) rotate(-270.000000) translate(-221.500000, -83.993827) &quot; x=&quot;141&quot; y=&quot;83&quot; width=&quot;161&quot; height=&quot;1.98765432&quot;&gt;&lt;/rect&gt;&lt;/g&gt;&lt;g id=&quot;action/decision&quot; transform=&quot;translate(121.000000, 74.000000)&quot;&gt;&lt;text id=&quot;decision-point&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;43&quot; y=&quot;24&quot;&gt;decision point&lt;/tspan&gt;&lt;/text&gt;&lt;use id=&quot;Rectangle-121&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-8)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; transform=&quot;translate(19.000000, 19.000000) rotate(-315.000000) translate(-19.000000, -19.000000) &quot; xlink:href=&quot;#path-7&quot;&gt;&lt;/use&gt;&lt;/g&gt;&lt;g id=&quot;Line-+-Triangle-1&quot; transform=&quot;translate(0.000000, 26.000000)&quot;&gt;&lt;path d=&quot;M1,153.519608 L1,4.22899284 M1,154.013072 L19,154.013072&quot; id=&quot;Line&quot; stroke=&quot;#7F8C8D&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;square&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M1,254.519608 L1,105.228993 M1,255.013072 L19,255.013072&quot; id=&quot;Line&quot; stroke=&quot;#7F8C8D&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;square&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M93.7226482,5 C93.1734159,6.37929564 92,8 92,8 L98.75,5 L100,5 L100,4.44444444 L101,4 L100,3.55555556 L100,3 L98.75,3 L92,0 C92,0 93.3049783,1.67752588 93.8066955,3 L2,3 L2,5 L93.7226482,5 Z&quot; id=&quot;Triangle-1&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M151.722648,256 C151.173416,257.379296 150,259 150,259 L156.75,256 L158,256 L158,255.444444 L159,255 L158,254.555556 L158,254 L156.75,254 L150,251 C150,251 151.304978,252.677526 151.806695,254 L60,254 L60,256 L151.722648,256 Z&quot; id=&quot;Triangle-1&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;connection/completion/arrow--mini&quot; transform=&quot;translate(201.000000, 245.000000) rotate(-270.000000) translate(-201.000000, -245.000000) translate(188.000000, 241.000000)&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;path d=&quot;M18.7226482,5 C18.1734159,6.37929564 17,8 17,8 L26,4 L17,0 C17,0 18.3049783,1.67752588 18.8066955,3 L0,3 L0,5 L18.7226482,5 Z&quot; id=&quot;Triangle-1&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path d=&quot;M180.5,304 L148,304&quot; id=&quot;Line&quot; stroke=&quot;#979797&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;square&quot;&gt;&lt;/path&gt;&lt;g id=&quot;action/decision&quot; transform=&quot;translate(182.000000, 254.000000)&quot;&gt;&lt;text id=&quot;decision-point&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;43&quot; y=&quot;24&quot;&gt;decision point&lt;/tspan&gt;&lt;/text&gt;&lt;use id=&quot;Rectangle-121&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-10)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; transform=&quot;translate(19.000000, 19.000000) rotate(-315.000000) translate(-19.000000, -19.000000) &quot; xlink:href=&quot;#path-9&quot;&gt;&lt;/use&gt;&lt;/g&gt;&lt;path d=&quot;M361,256.5 L361,304.5&quot; id=&quot;Line&quot; stroke=&quot;#979797&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;square&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is particularly painful, isn’t it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;On the other hand, a vertical instruction flow make things much simpler.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;svg width=&quot;80px&quot; height=&quot;232px&quot; viewBox=&quot;0 0 80 232&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&lt;defs&gt;&lt;polygon id=&quot;path-1&quot; points=&quot;-5.68434189e-14 50.2998047 -5.68434189e-14 10.3369141 10.3095703 0 70 0 80 9.86816406 80 50.3212891 69.6318359 60 9.42285156 60&quot;&gt;&lt;/polygon&gt;&lt;mask id=&quot;mask-2&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-1&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;rect id=&quot;path-3&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot;&gt;&lt;/rect&gt;&lt;mask id=&quot;mask-4&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-3&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;rect id=&quot;path-5&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot;&gt;&lt;/rect&gt;&lt;mask id=&quot;mask-6&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-5&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;/defs&gt;&lt;g id=&quot;A-visual-vocabulary--&quot; stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;g id=&quot;Artboard&quot; transform=&quot;translate(-620.000000, -26.000000)&quot;&gt;&lt;g id=&quot;useful-label&quot; transform=&quot;translate(620.000000, 26.000000)&quot;&gt;&lt;g id=&quot;basic/reference&quot; transform=&quot;translate(0.000000, 86.000000)&quot;&gt;&lt;use id=&quot;page&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-2)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; xlink:href=&quot;#path-1&quot;&gt;&lt;/use&gt;&lt;text id=&quot;foo&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;23.5&quot; y=&quot;35&quot;&gt;do foo&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;basic/page-text&quot;&gt;&lt;use id=&quot;page&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-4)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; xlink:href=&quot;#path-3&quot;&gt;&lt;/use&gt;&lt;text id=&quot;login&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;20.0136719&quot; y=&quot;32.9296875&quot;&gt;do A&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;connection/completion/arrow--mini&quot; transform=&quot;translate(40.000000, 73.000000) rotate(-270.000000) translate(-40.000000, -73.000000) translate(27.000000, 69.000000)&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;path d=&quot;M18.7226482,5 C18.1734159,6.37929564 17,8 17,8 L26,4 L17,0 C17,0 18.3049783,1.67752588 18.8066955,3 L0,3 L0,5 L18.7226482,5 Z&quot; id=&quot;Triangle-1&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;connection/completion/arrow--mini&quot; transform=&quot;translate(40.000000, 159.000000) rotate(-270.000000) translate(-40.000000, -159.000000) translate(27.000000, 155.000000)&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;path d=&quot;M18.7226482,5 C18.1734159,6.37929564 17,8 17,8 L26,4 L17,0 C17,0 18.3049783,1.67752588 18.8066955,3 L0,3 L0,5 L18.7226482,5 Z&quot; id=&quot;Triangle-1&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;basic/page-text&quot; transform=&quot;translate(0.000000, 172.000000)&quot;&gt;&lt;use id=&quot;page&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-6)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; xlink:href=&quot;#path-5&quot;&gt;&lt;/use&gt;&lt;text id=&quot;login&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;19.6826172&quot; y=&quot;32.9296875&quot;&gt;do B&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Applied to our example, we replace&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/e32af14aa7bc58e522dc10652df291dd.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;By this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/c4e64d7ab5e4bd1c48a9472d7afdad3c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We take a breathe! No decision tree, no “unambiguous” variable (item), functions that make a unitary job …&lt;/p&gt;

&lt;p&gt;We comments again by example, line by line:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/529d960b711ccd8d059fc61abe9294fc.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;final-code&quot;&gt;Final Code&lt;/h2&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/ef29f2e44eafb0da0d304823cc3805e5.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;small-synthesis&quot;&gt;Small synthesis&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The code must be covered by automated testing. It does not matter whether they are unitary, of integration, of acceptance. The absence of a safety net prevents the code from being improved.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The input parameters must be checked. Although this point is particularly subject to debate in the case of a dynamic language, it will help you to debug your code faster, and also increasing the readability of the code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The functions must be as small as possible, with a maximum explicit naming.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A readable code is not necessarily the shortest.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Avoid any for loop, application programming simplifies reading.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;any (relevant!) comment is good, but the best remains the explanation of the nominal case.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://packagecontrol.io/packages/Alignment&quot;&gt;Aligning characters&lt;/a&gt; helps to make the code readable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Any oddity, counter-intuitive or that makes you think for more than 2 seconds must be written in black and white using a statement previously made by the team members (XXX most often).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To avoid overloading the article, naming variables has not been mentioned, whereas it is probably &lt;a href=&quot;https://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;the hardest thing&lt;/a&gt; in computing. You’ve been warned :)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s never really over :&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/making-internets/why-using-chain-is-a-mistake-9bc1f80d51ba#.5qwj6cycm&quot;&gt;a recent article&lt;/a&gt; suggests not to use _.chain&lt;/li&gt;
      &lt;li&gt;we should at least put a warning if an input parameter is not valid in our example.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 23 Jan 2017 00:00:00 +0100</pubDate>
        <link>http://bdavidxyz.com/blog/clean-code/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/clean-code/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Why I don't care about your project</title>
        <description>&lt;p&gt;&lt;em&gt;Text below is a translation of a &lt;a href=&quot;http://blog.laurentschaffner.com/pourquoi-je-me-fous-de-ton-projet/&quot;&gt;Pierre Schaffner article&lt;/a&gt;, who kindly authorizes me to publish a translated version.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Most people don’t realise &lt;strong&gt;just how many proposals&lt;/strong&gt; coming from &lt;strong&gt;small business owners&lt;/strong&gt; that I, as an independent developer, receive through my &lt;strong&gt;email account&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Obviously, I am not talking about great projects with real financing and that represent no major technical problem. No, I receive &lt;strong&gt;fabulous proposals&lt;/strong&gt; for which I am offered shares of the yet-to-be-created company that will start its official existence after the project has garnered an incredible success that completely depends on &lt;b style=&quot;text-decoration:underline&quot;&gt;your&lt;/b&gt; developing skills.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270159/widcayp1_tw3mn7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’re reading this, it’s probably because instead of taking an hour to explain all of this to you personally, I chose to send you this link.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-receive-offers-every-day&quot;&gt;I receive offers every day&lt;/h2&gt;

&lt;p&gt;I am not kidding when I say I receive &lt;strong&gt;so-called innovating projects&lt;/strong&gt; every day. And I know I am &lt;strong&gt;not the only one.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You think your idea is amazing and deserves my full attention, that I should spend hours working on it even though I might never receive anything in exchange for my investment? There are thousands of people like you and apart from engineering students who need to complete their training, &lt;b style=&quot;text-decoration:underline&quot;&gt;no one will take that risk.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Having an idea is good. A business plan with nice graphs is also nice. More often than not, the idea is &lt;strong&gt;good or even very good&lt;/strong&gt;. However, as soon we get to talk about concrete matters, I’m left &lt;strong&gt;on my own&lt;/strong&gt;. You think a developer can’t create a Word or Excel file and organize a project? Well you’re wrong.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270164/widcayp2_zxtbgu.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In theory, I’m just a worker who generates codes, solves bugs on applications, not a thinking person (this one goes to you, business schools). However, I &lt;strong&gt;almost always&lt;/strong&gt; have to change the structure of the projects I receive, improve the &lt;strong&gt;marketing strategy&lt;/strong&gt; for a project created by others, deal with &lt;strong&gt;communication&lt;/strong&gt; on the texts published on the website, or even audit this or that, usually &lt;strong&gt;for free&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So you say you have professional knowledge of SEO &lt;strong&gt;but you don’t know what URL-rewriting is? Or Htacc– what?&lt;/strong&gt; Let me tell you that developers &lt;b style=&quot;text-decoration:underline&quot;&gt;have real knowledge of SEO&lt;/b&gt; because they’re the ones doing the &lt;strong&gt;optimization&lt;/strong&gt; on the projects they receive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most independent web developers also take care of communication and marketing tasks&lt;/strong&gt;. They are versatile and they can do what you do. The only difference is they usually have a &lt;b style=&quot;text-decoration:underline&quot;&gt;better understanding of the market&lt;/b&gt; because they are experienced in innovative developing and because they’ve already received an &lt;strong&gt;incredible number of bad proposals&lt;/strong&gt; before yours came along.&lt;/p&gt;

&lt;p&gt;&lt;b style=&quot;text-decoration:underline&quot;&gt;No,&lt;/b&gt; that new thing they talked about on TV last night, responsive web design, is not that new and you won’t be the first one to use it for your website that specializes in cat ads.&lt;/p&gt;

&lt;h2 id=&quot;i-have-never-seen-any-of-those-projects-turn-into-a-success-story&quot;&gt;I have never seen any of those projects turn into a success story&lt;/h2&gt;

&lt;p&gt;I have received &lt;strong&gt;dozens&lt;/strong&gt; of offers and I sometimes spent &lt;strong&gt;too much time&lt;/strong&gt; on them. Most of those projects &lt;strong&gt;never really started&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Some were badly developed because programmers ran out of patience and their source code turned into some kind &lt;strong&gt;spaghetti&lt;/strong&gt;. Yes, if you modify parts of a code, you can end up generating a flawed code. Refactorization is something you do in the beginning, when you believe in the project, &lt;strong&gt;not after you’ve already spent 6 months on the creation process.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270152/widcayp3_vwjx4o.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The worst kind of business offer&lt;/strong&gt; is when you ask me to continue working on a code that was partially created by a developer who lost patience and faith. I know what to expect when you tell me about a project that is almost finished but only lacks a bit of work. On the Internet, you can find &lt;strong&gt;different technologies and programming styles&lt;/strong&gt;. A source code that has been created by a student cannot be finished by someone else unless they work on half of what’s already been created. That means &lt;strong&gt;hours&lt;/strong&gt; of observation before even starting to modify it.&lt;/p&gt;

&lt;p&gt;So forget about that, because any experienced developer will refuse to do that.&lt;/p&gt;

&lt;h2 id=&quot;we-have-projects-too-you-know&quot;&gt;We have projects too, you know&lt;/h2&gt;

&lt;p&gt;All the developers I know also have &lt;strong&gt;a project of their own&lt;/strong&gt;. We’ve worked on many projects before yours came along and we’re always working on one or two ideas &lt;strong&gt;outside working hours&lt;/strong&gt; because they’re &lt;strong&gt;a lot more interesting&lt;/strong&gt; than the industrial projects we spend our days slaving over.&lt;/p&gt;

&lt;p&gt;So when you tell a developer your project only requires “a few hours a week, outside working hours”, we couldn’t care less, because during those few hours, we will always choose projects we can control from the beginning to the end without dealing with outside intervention and for which we own 100% of shares.&lt;/p&gt;

&lt;h2 id=&quot;if-your-project-was-that-important-to-you-you-would-learn-how-to-create-it-on-your-own&quot;&gt;“If your project was that important to you, you would learn how to create it on your own”&lt;/h2&gt;

&lt;p&gt;This is what the developer &lt;strong&gt;you have an appointment with&lt;/strong&gt; is thinking, even though he &lt;strong&gt;will never tell you.&lt;/strong&gt; Programming is not an occult practice reserved only to those who studied advanced engineering. Any thirteen-year-old kid can create their website. You’re over 20 and possess &lt;strong&gt;all the cognitive skills&lt;/strong&gt; to do it too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270159/widcayp4_coadyw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But here’s the thing &lt;strong&gt;you’ll never admit to yourself&lt;/strong&gt; or others: &lt;strong&gt;you’re too lazy to learn&lt;/strong&gt;. After all, you’re the &lt;strong&gt;&lt;em&gt;marketing and communication professional&lt;/em&gt;&lt;/strong&gt;, not a technician. If you really believe in your revolutionary project, why don’t you take &lt;strong&gt;6 months&lt;/strong&gt; to get to know about the technology?&lt;/p&gt;

&lt;p&gt;Sure, the end result might not be amazing, because some people are good and others just aren’t. Also, you are likely to encounter difficulties when it comes to &lt;strong&gt;graphic design&lt;/strong&gt;. So what? You can always do most of the work and hire someone to take care of modelling and graphic design. But we both know &lt;em&gt;it’s a lot easier to ask a guy to do the developing for you and wait for him to do the job while hoping he’ll be happy with just 5 or 10% of your ridiculous shares&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270164/widcayp5_vmtftw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That developer you’re in contact with knows perfectly how easy &lt;strong&gt;communication is if the application is good&lt;/strong&gt;. The key point is not the Facebook page where you’ll publish the exciting news about your project but creation itself. We know you won’t be working that hard while we’re actually &lt;strong&gt;handling everything.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270166/widcayp6_ksvgqr.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So while you decide you need a &lt;em&gt;Like button&lt;/em&gt; here but not there, and then change your mind, your developer &lt;b style=&quot;text-decoration:underline&quot;&gt;knew from the start&lt;/b&gt; what to do but you chose not to listen. Or maybe your developer didn’t tell you because at the end of the day, it’s YOUR project and the 5% shares you promised means he won’t work that hard for you, I can assure you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270167/widcayp7_n8e2ps.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-alternative-that-makes-everyone-happy&quot;&gt;The alternative that makes everyone happy&lt;/h2&gt;

&lt;p&gt;The only solution that will &lt;strong&gt;satisfy all involved&lt;/strong&gt; consists in partially paying the person working with you on this project. Don’t overpay them, just pay them enough to make them interested so they’ll get involved in what they do. For a big project, you could offer 30% of the initial price plus shares, for instance. For the developer, it’s a guarantee they will receive something &lt;strong&gt;as opposed to receiving nothing even though they invested numerous hours of work in a never-ending project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270167/widcayp8_y0pw7v.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If the project turns out to be a failure&lt;/strong&gt;, the developer will think you did take a real financial risk and did not just waste their time. This will truly matter &lt;strong&gt;when you send them other offers&lt;/strong&gt;, which is important if you’re planning on investing in other projects of that kind.&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Aug 2016 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/why-i-dont-care-about-your-project/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/why-i-dont-care-about-your-project/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>What Bootstrap 4 looks like</title>
        <description>&lt;p&gt;Here is a giant collection of all visual elements, extracted from Bootstrap 4 docs.&lt;/p&gt;

&lt;h2 id=&quot;short-version&quot;&gt;Short version&lt;/h2&gt;

&lt;p&gt;The giant asset page is here : &lt;a href=&quot;http://bdavidxyz.github.io/yourown-bootstrap4/all.html&quot;&gt;http://bdavidxyz.github.io/yourown-bootstrap4/all.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;long-version&quot;&gt;Long version&lt;/h2&gt;

&lt;p&gt;I’m creating your &lt;a href=&quot;https://github.com/bdavidxyz/yourown-bootstrap4&quot;&gt;yourown-bootstrap4&lt;/a&gt;, an work-in-progress open-source project that will allow you to create your own bootstrap 4 theme “the right way” : it will give you a fast local workflow, an optimised, fast rendering once in production, a good documentation so that will focus on design, not technical details. And, finally, a way to visually check how your whole bootstrap distribution will look like : a big collection of all visual elements, extracted from Bootstrap 4 docs, that cover every corner cases.&lt;/p&gt;

&lt;p&gt;You can also think about it as an automatic style guide for your own theme.&lt;/p&gt;

&lt;p&gt;This task is done, even if the whole job is not.&lt;/p&gt;

&lt;p&gt;I presume the impatients will be happy to see what the new Bootstrap will look like.&lt;/p&gt;

&lt;p&gt;I know there is already the official Bootstrap 4 docs that show all elements, but&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They are dispatched into multiples pages, if you want to quickly see all the assets it takes too much time,&lt;/li&gt;
  &lt;li&gt;Visual elements are blurred by &lt;em&gt;stuffs&lt;/em&gt;. Docs are here to show you everything, visual elements yes, but also code, explanations, warnings, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, here is &lt;a href=&quot;http://bdavidxyz.github.io/yourown-bootstrap4/all.html&quot;&gt;the whole page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don’t expect a bunch of new spectacular visual components. There are some good new things of course, but the huge gap compared to Bootstrap 3 relies in the underlying code, which is now extremely easier and pleasant to use. This is the topic for another article I presume.&lt;/p&gt;

&lt;p&gt;For Bootstrap 3 the job has been done many times, see &lt;a href=&quot;http://stackoverflow.com/questions/15233089/is-there-a-giant-asset-page-of-all-bootstrap-elements-that-i-can-re-style&quot;&gt;this Stackoverflow question&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are no comments (yet) on this website, maybe the next time :)&lt;/p&gt;

&lt;p&gt;Enjoy !&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class=&quot;u-htube u-htube--center&quot;&gt;
  &lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What &lt;a href=&quot;https://twitter.com/hashtag/Bootstrap?src=hash&quot;&gt;#Bootstrap&lt;/a&gt; 4 looks like &lt;a href=&quot;https://t.co/WY4D2hQNNv&quot;&gt;https://t.co/WY4D2hQNNv&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/css?src=hash&quot;&gt;#css&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/webdesign?src=hash&quot;&gt;#webdesign&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Boureau (@bdavidxyz) &lt;a href=&quot;https://twitter.com/bdavidxyz/status/745917309747924992&quot;&gt;June 23, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 23 Jun 2016 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/what-bootstrap4-looks-like/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/what-bootstrap4-looks-like/</guid>
        
        
        <category>css</category>
        
      </item>
    
  </channel>
</rss>
