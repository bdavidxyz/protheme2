<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>David Boureau - Web development, acquisition</title>
    <description>David Boureau is a web developer based in Paris, France. He has a master in computer  science, works as a full-stack developer mostly in JavaScript and Node.js, as well as Ruby and Java.
</description>
    <link>http://bdavidxyz.com/</link>
    <atom:link href="http://bdavidxyz.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 10 Feb 2017 07:51:54 +0100</pubDate>
    <lastBuildDate>Fri, 10 Feb 2017 07:51:54 +0100</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>An exceedingly clean code</title>
        <description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 9 Feb 2017&lt;/strong&gt; : &lt;em&gt;Today, it is by far my most read article, and also the most hated. I didn’t intend to publish the holy grails of clean code, there is already a whole book for it. As the title implies, the quality is pushed a little too far, and achieve it on every function is probably not so realistic. I tried to explore new ways to document code and augment robustness, you don’t have to agree with / like it, just do whatever you want to increase both quality and speed of delivery.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The article is written with ES6 for examples, but the article could be applied to other programming languages.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;style type=&quot;text/css&quot;&gt;div.gist-meta{display: none;} div.gist .gist-file{border: none;} div.gist .gist-data{border: none;}&lt;/style&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/74bb653ee49fa849edc8e4037f1b8654.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;F*** what does this function try to…&lt;/li&gt;
  &lt;li&gt;stop, the dev who made it left last week&lt;/li&gt;
  &lt;li&gt;well, since _.zip is used, proposals and checkboxes are probably arrays.&lt;/li&gt;
  &lt;li&gt;good … arrays of what? Didn’t know _.zip, I discovered lodash with this project.&lt;/li&gt;
  &lt;li&gt;and what’s the point of line 4 condition ?&lt;/li&gt;
  &lt;li&gt;I dunno.&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A small, very small JS function of 11 lines turns into a maintenance nightmare. The slightest bug, the slightest recovery, the slightest refactoring costs a lot of time and energy.&lt;/p&gt;

&lt;p&gt;Knowing that any software is counted easily in thousands of lines of code …&lt;/p&gt;

&lt;h2 id=&quot;version-0--do-not-change-anything&quot;&gt;Version 0 : do not change anything&lt;/h2&gt;

&lt;p&gt;And write automated tests. No need to be unit tests written the TDD way. Integration tests written afterwards are just as good enough to begin with. Or acceptance tests.&lt;/p&gt;

&lt;p&gt;Without any test, it’s impossible to improve anything.&lt;/p&gt;

&lt;p&gt;Voluntarily I do not show the unit tests of this function, the purpose of the article is to give an example of documentation by the code.&lt;/p&gt;

&lt;h2 id=&quot;version-1--check-preconditions&quot;&gt;Version 1 : Check preconditions&lt;/h2&gt;

&lt;p&gt;In order to help the reader, while improving the robustness of the code, and to avoid the edge effects, let’s be sure of the input parameters before going further.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/59289f3cd5c817b03e8c31f1c8eb265a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We understand what the input parameters are, but that’s hard. Have you noticed the “!” Exclamation mark ?? No ? So why not write some utility functions that makes it great:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/fcf0c85fcf3df127a0eefd4f8b60c757.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And even better, we use an IDE plugin to get a nice alignment&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/0e4a37b6d0164f40221febba014d6c2f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;There you go ! No need to comment at this stage, it’s clear as water.&lt;/p&gt;

&lt;p&gt;We use Ruby-like code, where each word is placed in the right order to be sure we will able to read the code as in natural language. For example, here one can read in the 2nd line, excluding everything that is not strictly textual:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;if proposals is not array of string return []&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There you go ! Again, no need to comment until then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 1&lt;/strong&gt; : An effective way of fighting the anxiety of “but-what-if-this-happens” (and against the debugging hours!) is to guard against any unexpected parameters by returning an empty value corresponding to expected type. This is the behavior chosen in a majority of cases for lodash / underscore. (For example, returning an empty string if the function returns a String, an empty array if the array must return an Array, etc.).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 2&lt;/strong&gt; : Even a strongly-typed language wouldn’t have solved all problems. The checks on the difference of the array sizes / on the non-empty array would still have taken place.&lt;/p&gt;

&lt;h2 id=&quot;version-2--comment-by-example&quot;&gt;Version 2 : Comment by example&lt;/h2&gt;

&lt;p&gt;Comment the signature of the function. But-that-serves-nothing-if-the-function-is-well-named.&lt;/p&gt;

&lt;p&gt;Not exactly.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/b7488c92e7275216b5bfcef426820158.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;The general idea is: document by example.
    &lt;ul&gt;
      &lt;li&gt;These parameters are relocated in the overall context of the project (for example, it is understood that proposals are proposals or questions posed to the user)&lt;/li&gt;
      &lt;li&gt;By the way the type of parameters of the function are now evident.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Any odd / counterintuitive thing can be reported here. With the help of the word WARNING or XXX in the comments. It’s a bit like Github: do not be afraid to abuse it. There will ALWAYS be issues, always odd thinks in your code, even if you do not like it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;version-3--verticalize-your-code&quot;&gt;Version 3 : Verticalize your code&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&quot;http://stackoverflow.com/a/37770048/2595513&quot;&gt;StackOverflow answer&lt;/a&gt; is a good example of verticalization.&lt;/p&gt;

&lt;p&gt;In our case, the use of &lt;a href=&quot;http://bekk.github.io/functional-js/workshop/02-1-applicative&quot;&gt;applicative programming&lt;/a&gt; make  code greater.&lt;/p&gt;

&lt;p&gt;Even on a very small function, think about what happens when the flow of instruction looks like this&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;svg width=&quot;260px&quot; height=&quot;285px&quot; viewBox=&quot;0 0 260 285&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&lt;defs&gt;&lt;rect id=&quot;path-1&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot;&gt;&lt;/rect&gt;&lt;mask id=&quot;mask-2&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-1&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;rect id=&quot;path-3&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot;&gt;&lt;/rect&gt;&lt;mask id=&quot;mask-4&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-3&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;rect id=&quot;path-5&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot;&gt;&lt;/rect&gt;&lt;mask id=&quot;mask-6&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-5&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;rect id=&quot;path-7&quot; x=&quot;6&quot; y=&quot;6&quot; width=&quot;26&quot; height=&quot;26&quot;&gt;&lt;/rect&gt;&lt;mask id=&quot;mask-8&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;26&quot; height=&quot;26&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-7&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;rect id=&quot;path-9&quot; x=&quot;6&quot; y=&quot;6&quot; width=&quot;26&quot; height=&quot;26&quot;&gt;&lt;/rect&gt;&lt;mask id=&quot;mask-10&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;26&quot; height=&quot;26&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-9&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;/defs&gt;&lt;g id=&quot;A-visual-vocabulary--&quot; stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;g id=&quot;Artboard&quot; transform=&quot;translate(-141.000000, -23.000000)&quot;&gt;&lt;g id=&quot;Making-choices&quot; transform=&quot;translate(141.000000, 23.000000)&quot;&gt;&lt;g id=&quot;decision-point&quot;&gt;&lt;g id=&quot;basic/page-text&quot; transform=&quot;translate(100.000000, 0.000000)&quot;&gt;&lt;use id=&quot;page&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-2)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; xlink:href=&quot;#path-1&quot;&gt;&lt;/use&gt;&lt;text id=&quot;login&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;14.3476562&quot; y=&quot;32.9296875&quot;&gt;do this&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;basic/page-text&quot; transform=&quot;translate(20.000000, 150.000000)&quot;&gt;&lt;use id=&quot;page&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-4)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; xlink:href=&quot;#path-3&quot;&gt;&lt;/use&gt;&lt;text id=&quot;login&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;13.6767578&quot; y=&quot;32.9296875&quot;&gt;do that&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;basic/page-text-2&quot; transform=&quot;translate(180.000000, 150.000000)&quot;&gt;&lt;use id=&quot;page&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-6)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; xlink:href=&quot;#path-5&quot;&gt;&lt;/use&gt;&lt;text id=&quot;product&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;11.5&quot; y=&quot;28&quot;&gt;launch this&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;arrow/connection&quot; transform=&quot;translate(129.000000, 172.500000) rotate(-270.000000) translate(-129.000000, -172.500000) translate(16.500000, 77.500000)&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;path d=&quot;M84.3252772,4.74242424 C83.859262,5.91273569 82.8636364,7.28787879 82.8636364,7.28787879 L90.5,3.89393939 L82.8636364,0.5 C82.8636364,0.5 83.9708907,1.92335529 84.3965901,3.04545455 L64.5,3.04545455 L64.5,4.74242424 L84.3252772,4.74242424 Z M84.5,4.21126578 C84.5387505,4.05322147 84.5606061,3.9051318 84.5606061,3.77213542 C84.5606061,3.64835443 84.5387505,3.51052598 84.5,3.36343266 L84.5,4.21126578 Z&quot; id=&quot;Triangle-1&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M169.325277,4.74242424 C168.859262,5.91273569 167.863636,7.28787879 167.863636,7.28787879 L175.5,3.89393939 L167.863636,0.5 C167.863636,0.5 168.970891,1.92335529 169.39659,3.04545455 L149.5,3.04545455 L149.5,4.74242424 L169.325277,4.74242424 Z M169.5,4.21126578 C169.538751,4.05322147 169.560606,3.9051318 169.560606,3.77213542 C169.560606,3.64835443 169.538751,3.51052598 169.5,3.36343266 L169.5,4.21126578 Z&quot; id=&quot;Triangle-1&quot; transform=&quot;translate(162.500000, 3.893939) scale(-1, 1) translate(-162.500000, -3.893939) &quot;&gt;&lt;/path&gt;&lt;path d=&quot;M84.3252772,164.742424 C83.859262,165.912736 82.8636364,167.287879 82.8636364,167.287879 L90.5,163.893939 L82.8636364,160.5 C82.8636364,160.5 83.9708907,161.923355 84.3965901,163.045455 L64.5,163.045455 L64.5,164.742424 L84.3252772,164.742424 Z M84.5,164.211266 C84.5387505,164.053221 84.5606061,163.905132 84.5606061,163.772135 C84.5606061,163.648354 84.5387505,163.510526 84.5,163.363433 L84.5,164.211266 Z&quot; id=&quot;Triangle-1&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M228.325277,177.742424 C227.859262,178.912736 226.863636,180.287879 226.863636,180.287879 L234.5,176.893939 L226.863636,173.5 C226.863636,173.5 227.970891,174.923355 228.39659,176.045455 L208.5,176.045455 L208.5,177.742424 L228.325277,177.742424 Z M228.5,177.211266 C228.538751,177.053221 228.560606,176.905132 228.560606,176.772135 C228.560606,176.648354 228.538751,176.510526 228.5,176.363433 L228.5,177.211266 Z&quot; id=&quot;Triangle-1&quot; transform=&quot;translate(221.500000, 176.893939) rotate(90.000000) translate(-221.500000, -176.893939) &quot;&gt;&lt;/path&gt;&lt;rect id=&quot;Triangle-1&quot; x=&quot;0&quot; y=&quot;83&quot; width=&quot;66&quot; height=&quot;2&quot;&gt;&lt;/rect&gt;&lt;rect id=&quot;Triangle-1&quot; x=&quot;156&quot; y=&quot;163&quot; width=&quot;66&quot; height=&quot;2&quot;&gt;&lt;/rect&gt;&lt;rect id=&quot;Triangle-1&quot; transform=&quot;translate(65.500000, 83.993827) rotate(-270.000000) translate(-65.500000, -83.993827) &quot; x=&quot;-15&quot; y=&quot;83&quot; width=&quot;161&quot; height=&quot;1.98765432&quot;&gt;&lt;/rect&gt;&lt;rect id=&quot;Triangle-1&quot; transform=&quot;translate(221.500000, 83.993827) rotate(-270.000000) translate(-221.500000, -83.993827) &quot; x=&quot;141&quot; y=&quot;83&quot; width=&quot;161&quot; height=&quot;1.98765432&quot;&gt;&lt;/rect&gt;&lt;/g&gt;&lt;g id=&quot;action/decision&quot; transform=&quot;translate(121.000000, 74.000000)&quot;&gt;&lt;text id=&quot;decision-point&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;43&quot; y=&quot;24&quot;&gt;decision point&lt;/tspan&gt;&lt;/text&gt;&lt;use id=&quot;Rectangle-121&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-8)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; transform=&quot;translate(19.000000, 19.000000) rotate(-315.000000) translate(-19.000000, -19.000000) &quot; xlink:href=&quot;#path-7&quot;&gt;&lt;/use&gt;&lt;/g&gt;&lt;g id=&quot;Line-+-Triangle-1&quot; transform=&quot;translate(0.000000, 26.000000)&quot;&gt;&lt;path d=&quot;M1,153.519608 L1,4.22899284 M1,154.013072 L19,154.013072&quot; id=&quot;Line&quot; stroke=&quot;#7F8C8D&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;square&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M1,254.519608 L1,105.228993 M1,255.013072 L19,255.013072&quot; id=&quot;Line&quot; stroke=&quot;#7F8C8D&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;square&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M93.7226482,5 C93.1734159,6.37929564 92,8 92,8 L98.75,5 L100,5 L100,4.44444444 L101,4 L100,3.55555556 L100,3 L98.75,3 L92,0 C92,0 93.3049783,1.67752588 93.8066955,3 L2,3 L2,5 L93.7226482,5 Z&quot; id=&quot;Triangle-1&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;/path&gt;&lt;path d=&quot;M151.722648,256 C151.173416,257.379296 150,259 150,259 L156.75,256 L158,256 L158,255.444444 L159,255 L158,254.555556 L158,254 L156.75,254 L150,251 C150,251 151.304978,252.677526 151.806695,254 L60,254 L60,256 L151.722648,256 Z&quot; id=&quot;Triangle-1&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g id=&quot;connection/completion/arrow--mini&quot; transform=&quot;translate(201.000000, 245.000000) rotate(-270.000000) translate(-201.000000, -245.000000) translate(188.000000, 241.000000)&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;path d=&quot;M18.7226482,5 C18.1734159,6.37929564 17,8 17,8 L26,4 L17,0 C17,0 18.3049783,1.67752588 18.8066955,3 L0,3 L0,5 L18.7226482,5 Z&quot; id=&quot;Triangle-1&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path d=&quot;M180.5,304 L148,304&quot; id=&quot;Line&quot; stroke=&quot;#979797&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;square&quot;&gt;&lt;/path&gt;&lt;g id=&quot;action/decision&quot; transform=&quot;translate(182.000000, 254.000000)&quot;&gt;&lt;text id=&quot;decision-point&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;43&quot; y=&quot;24&quot;&gt;decision point&lt;/tspan&gt;&lt;/text&gt;&lt;use id=&quot;Rectangle-121&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-10)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; transform=&quot;translate(19.000000, 19.000000) rotate(-315.000000) translate(-19.000000, -19.000000) &quot; xlink:href=&quot;#path-9&quot;&gt;&lt;/use&gt;&lt;/g&gt;&lt;path d=&quot;M361,256.5 L361,304.5&quot; id=&quot;Line&quot; stroke=&quot;#979797&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;square&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is particularly painful, isn’t it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;On the other hand, a vertical instruction flow make things much simpler.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;svg width=&quot;80px&quot; height=&quot;232px&quot; viewBox=&quot;0 0 80 232&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&lt;defs&gt;&lt;polygon id=&quot;path-1&quot; points=&quot;-5.68434189e-14 50.2998047 -5.68434189e-14 10.3369141 10.3095703 0 70 0 80 9.86816406 80 50.3212891 69.6318359 60 9.42285156 60&quot;&gt;&lt;/polygon&gt;&lt;mask id=&quot;mask-2&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-1&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;rect id=&quot;path-3&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot;&gt;&lt;/rect&gt;&lt;mask id=&quot;mask-4&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-3&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;rect id=&quot;path-5&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot;&gt;&lt;/rect&gt;&lt;mask id=&quot;mask-6&quot; maskContentUnits=&quot;userSpaceOnUse&quot; maskUnits=&quot;objectBoundingBox&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;80&quot; height=&quot;60&quot; fill=&quot;white&quot;&gt;&lt;use xlink:href=&quot;#path-5&quot;&gt;&lt;/use&gt;&lt;/mask&gt;&lt;/defs&gt;&lt;g id=&quot;A-visual-vocabulary--&quot; stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;g id=&quot;Artboard&quot; transform=&quot;translate(-620.000000, -26.000000)&quot;&gt;&lt;g id=&quot;useful-label&quot; transform=&quot;translate(620.000000, 26.000000)&quot;&gt;&lt;g id=&quot;basic/reference&quot; transform=&quot;translate(0.000000, 86.000000)&quot;&gt;&lt;use id=&quot;page&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-2)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; xlink:href=&quot;#path-1&quot;&gt;&lt;/use&gt;&lt;text id=&quot;foo&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;23.5&quot; y=&quot;35&quot;&gt;do foo&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;basic/page-text&quot;&gt;&lt;use id=&quot;page&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-4)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; xlink:href=&quot;#path-3&quot;&gt;&lt;/use&gt;&lt;text id=&quot;login&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;20.0136719&quot; y=&quot;32.9296875&quot;&gt;do A&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;connection/completion/arrow--mini&quot; transform=&quot;translate(40.000000, 73.000000) rotate(-270.000000) translate(-40.000000, -73.000000) translate(27.000000, 69.000000)&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;path d=&quot;M18.7226482,5 C18.1734159,6.37929564 17,8 17,8 L26,4 L17,0 C17,0 18.3049783,1.67752588 18.8066955,3 L0,3 L0,5 L18.7226482,5 Z&quot; id=&quot;Triangle-1&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;connection/completion/arrow--mini&quot; transform=&quot;translate(40.000000, 159.000000) rotate(-270.000000) translate(-40.000000, -159.000000) translate(27.000000, 155.000000)&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;path d=&quot;M18.7226482,5 C18.1734159,6.37929564 17,8 17,8 L26,4 L17,0 C17,0 18.3049783,1.67752588 18.8066955,3 L0,3 L0,5 L18.7226482,5 Z&quot; id=&quot;Triangle-1&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g id=&quot;basic/page-text&quot; transform=&quot;translate(0.000000, 172.000000)&quot;&gt;&lt;use id=&quot;page&quot; stroke=&quot;#7F8C8D&quot; mask=&quot;url(#mask-6)&quot; stroke-width=&quot;4&quot; fill=&quot;#FFFFFF&quot; fill-rule=&quot;evenodd&quot; xlink:href=&quot;#path-5&quot;&gt;&lt;/use&gt;&lt;text id=&quot;login&quot; font-family=&quot;ArialMT, Arial&quot; font-size=&quot;12&quot; font-weight=&quot;normal&quot; line-spacing=&quot;13&quot; fill=&quot;#7F8C8D&quot;&gt;&lt;tspan x=&quot;19.6826172&quot; y=&quot;32.9296875&quot;&gt;do B&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Applied to our example, we replace&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/e32af14aa7bc58e522dc10652df291dd.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;By this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/c4e64d7ab5e4bd1c48a9472d7afdad3c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We take a breathe! No decision tree, no “unambiguous” variable (item), functions that make a unitary job …&lt;/p&gt;

&lt;p&gt;We comments again by example, line by line:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/529d960b711ccd8d059fc61abe9294fc.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;final-code&quot;&gt;Final Code&lt;/h2&gt;

&lt;script src=&quot;https://gist.github.com/bdavidxyz/ef29f2e44eafb0da0d304823cc3805e5.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;small-synthesis&quot;&gt;Small synthesis&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The code must be covered by automated testing. It does not matter whether they are unitary, of integration, of acceptance. The absence of a safety net prevents the code from being improved.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The input parameters must be checked. Although this point is particularly subject to debate in the case of a dynamic language, it will help you to debug your code faster, and also increasing the readability of the code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The functions must be as small as possible, with a maximum explicit naming.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A readable code is not necessarily the shortest.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Avoid any for loop, application programming simplifies reading.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;any (relevant!) comment is good, but the best remains the explanation of the nominal case.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://packagecontrol.io/packages/Alignment&quot;&gt;Aligning characters&lt;/a&gt; helps to make the code readable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Any oddity, counter-intuitive or that makes you think for more than 2 seconds must be written in black and white using a statement previously made by the team members (XXX most often).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To avoid overloading the article, naming variables has not been mentioned, whereas it is probably &lt;a href=&quot;https://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;the hardest thing&lt;/a&gt; in computing. You’ve been warned :)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It’s never really over :&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://medium.com/making-internets/why-using-chain-is-a-mistake-9bc1f80d51ba#.5qwj6cycm&quot;&gt;a recent article&lt;/a&gt; suggests not to use _.chain&lt;/li&gt;
      &lt;li&gt;we should at least put a warning if an input parameter is not valid in our example.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 23 Jan 2017 00:00:00 +0100</pubDate>
        <link>http://bdavidxyz.com/blog/clean-code/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/clean-code/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>Why I don't care about your project</title>
        <description>&lt;p&gt;&lt;em&gt;Text below is a translation of a &lt;a href=&quot;http://blog.laurentschaffner.com/pourquoi-je-me-fous-de-ton-projet/&quot;&gt;Pierre Schaffner article&lt;/a&gt;, who kindly authorizes me to publish a translated version.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Most people don’t realise &lt;strong&gt;just how many proposals&lt;/strong&gt; coming from &lt;strong&gt;small business owners&lt;/strong&gt; that I, as an independent developer, receive through my &lt;strong&gt;email account&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Obviously, I am not talking about great projects with real financing and that represent no major technical problem. No, I receive &lt;strong&gt;fabulous proposals&lt;/strong&gt; for which I am offered shares of the yet-to-be-created company that will start its official existence after the project has garnered an incredible success that completely depends on &lt;b style=&quot;text-decoration:underline&quot;&gt;your&lt;/b&gt; developing skills.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270159/widcayp1_tw3mn7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you’re reading this, it’s probably because instead of taking an hour to explain all of this to you personally, I chose to send you this link.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;i-receive-offers-every-day&quot;&gt;I receive offers every day&lt;/h2&gt;

&lt;p&gt;I am not kidding when I say I receive &lt;strong&gt;so-called innovating projects&lt;/strong&gt; every day. And I know I am &lt;strong&gt;not the only one.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You think your idea is amazing and deserves my full attention, that I should spend hours working on it even though I might never receive anything in exchange for my investment? There are thousands of people like you and apart from engineering students who need to complete their training, &lt;b style=&quot;text-decoration:underline&quot;&gt;no one will take that risk.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Having an idea is good. A business plan with nice graphs is also nice. More often than not, the idea is &lt;strong&gt;good or even very good&lt;/strong&gt;. However, as soon we get to talk about concrete matters, I’m left &lt;strong&gt;on my own&lt;/strong&gt;. You think a developer can’t create a Word or Excel file and organize a project? Well you’re wrong.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270164/widcayp2_zxtbgu.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In theory, I’m just a worker who generates codes, solves bugs on applications, not a thinking person (this one goes to you, business schools). However, I &lt;strong&gt;almost always&lt;/strong&gt; have to change the structure of the projects I receive, improve the &lt;strong&gt;marketing strategy&lt;/strong&gt; for a project created by others, deal with &lt;strong&gt;communication&lt;/strong&gt; on the texts published on the website, or even audit this or that, usually &lt;strong&gt;for free&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So you say you have professional knowledge of SEO &lt;strong&gt;but you don’t know what URL-rewriting is? Or Htacc– what?&lt;/strong&gt; Let me tell you that developers &lt;b style=&quot;text-decoration:underline&quot;&gt;have real knowledge of SEO&lt;/b&gt; because they’re the ones doing the &lt;strong&gt;optimization&lt;/strong&gt; on the projects they receive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most independent web developers also take care of communication and marketing tasks&lt;/strong&gt;. They are versatile and they can do what you do. The only difference is they usually have a &lt;b style=&quot;text-decoration:underline&quot;&gt;better understanding of the market&lt;/b&gt; because they are experienced in innovative developing and because they’ve already received an &lt;strong&gt;incredible number of bad proposals&lt;/strong&gt; before yours came along.&lt;/p&gt;

&lt;p&gt;&lt;b style=&quot;text-decoration:underline&quot;&gt;No,&lt;/b&gt; that new thing they talked about on TV last night, responsive web design, is not that new and you won’t be the first one to use it for your website that specializes in cat ads.&lt;/p&gt;

&lt;h2 id=&quot;i-have-never-seen-any-of-those-projects-turn-into-a-success-story&quot;&gt;I have never seen any of those projects turn into a success story&lt;/h2&gt;

&lt;p&gt;I have received &lt;strong&gt;dozens&lt;/strong&gt; of offers and I sometimes spent &lt;strong&gt;too much time&lt;/strong&gt; on them. Most of those projects &lt;strong&gt;never really started&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Some were badly developed because programmers ran out of patience and their source code turned into some kind &lt;strong&gt;spaghetti&lt;/strong&gt;. Yes, if you modify parts of a code, you can end up generating a flawed code. Refactorization is something you do in the beginning, when you believe in the project, &lt;strong&gt;not after you’ve already spent 6 months on the creation process.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270152/widcayp3_vwjx4o.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The worst kind of business offer&lt;/strong&gt; is when you ask me to continue working on a code that was partially created by a developer who lost patience and faith. I know what to expect when you tell me about a project that is almost finished but only lacks a bit of work. On the Internet, you can find &lt;strong&gt;different technologies and programming styles&lt;/strong&gt;. A source code that has been created by a student cannot be finished by someone else unless they work on half of what’s already been created. That means &lt;strong&gt;hours&lt;/strong&gt; of observation before even starting to modify it.&lt;/p&gt;

&lt;p&gt;So forget about that, because any experienced developer will refuse to do that.&lt;/p&gt;

&lt;h2 id=&quot;we-have-projects-too-you-know&quot;&gt;We have projects too, you know&lt;/h2&gt;

&lt;p&gt;All the developers I know also have &lt;strong&gt;a project of their own&lt;/strong&gt;. We’ve worked on many projects before yours came along and we’re always working on one or two ideas &lt;strong&gt;outside working hours&lt;/strong&gt; because they’re &lt;strong&gt;a lot more interesting&lt;/strong&gt; than the industrial projects we spend our days slaving over.&lt;/p&gt;

&lt;p&gt;So when you tell a developer your project only requires “a few hours a week, outside working hours”, we couldn’t care less, because during those few hours, we will always choose projects we can control from the beginning to the end without dealing with outside intervention and for which we own 100% of shares.&lt;/p&gt;

&lt;h2 id=&quot;if-your-project-was-that-important-to-you-you-would-learn-how-to-create-it-on-your-own&quot;&gt;“If your project was that important to you, you would learn how to create it on your own”&lt;/h2&gt;

&lt;p&gt;This is what the developer &lt;strong&gt;you have an appointment with&lt;/strong&gt; is thinking, even though he &lt;strong&gt;will never tell you.&lt;/strong&gt; Programming is not an occult practice reserved only to those who studied advanced engineering. Any thirteen-year-old kid can create their website. You’re over 20 and possess &lt;strong&gt;all the cognitive skills&lt;/strong&gt; to do it too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270159/widcayp4_coadyw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But here’s the thing &lt;strong&gt;you’ll never admit to yourself&lt;/strong&gt; or others: &lt;strong&gt;you’re too lazy to learn&lt;/strong&gt;. After all, you’re the &lt;strong&gt;&lt;em&gt;marketing and communication professional&lt;/em&gt;&lt;/strong&gt;, not a technician. If you really believe in your revolutionary project, why don’t you take &lt;strong&gt;6 months&lt;/strong&gt; to get to know about the technology?&lt;/p&gt;

&lt;p&gt;Sure, the end result might not be amazing, because some people are good and others just aren’t. Also, you are likely to encounter difficulties when it comes to &lt;strong&gt;graphic design&lt;/strong&gt;. So what? You can always do most of the work and hire someone to take care of modelling and graphic design. But we both know &lt;em&gt;it’s a lot easier to ask a guy to do the developing for you and wait for him to do the job while hoping he’ll be happy with just 5 or 10% of your ridiculous shares&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270164/widcayp5_vmtftw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That developer you’re in contact with knows perfectly how easy &lt;strong&gt;communication is if the application is good&lt;/strong&gt;. The key point is not the Facebook page where you’ll publish the exciting news about your project but creation itself. We know you won’t be working that hard while we’re actually &lt;strong&gt;handling everything.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270166/widcayp6_ksvgqr.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So while you decide you need a &lt;em&gt;Like button&lt;/em&gt; here but not there, and then change your mind, your developer &lt;b style=&quot;text-decoration:underline&quot;&gt;knew from the start&lt;/b&gt; what to do but you chose not to listen. Or maybe your developer didn’t tell you because at the end of the day, it’s YOUR project and the 5% shares you promised means he won’t work that hard for you, I can assure you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270167/widcayp7_n8e2ps.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-alternative-that-makes-everyone-happy&quot;&gt;The alternative that makes everyone happy&lt;/h2&gt;

&lt;p&gt;The only solution that will &lt;strong&gt;satisfy all involved&lt;/strong&gt; consists in partially paying the person working with you on this project. Don’t overpay them, just pay them enough to make them interested so they’ll get involved in what they do. For a big project, you could offer 30% of the initial price plus shares, for instance. For the developer, it’s a guarantee they will receive something &lt;strong&gt;as opposed to receiving nothing even though they invested numerous hours of work in a never-ending project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/bdavidxyz-com/image/upload/v1472270167/widcayp8_y0pw7v.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If the project turns out to be a failure&lt;/strong&gt;, the developer will think you did take a real financial risk and did not just waste their time. This will truly matter &lt;strong&gt;when you send them other offers&lt;/strong&gt;, which is important if you’re planning on investing in other projects of that kind.&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Aug 2016 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/why-i-dont-care-about-your-project/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/why-i-dont-care-about-your-project/</guid>
        
        
        <category>work</category>
        
      </item>
    
      <item>
        <title>What Bootstrap 4 looks like</title>
        <description>&lt;p&gt;Here is a giant collection of all visual elements, extracted from Bootstrap 4 docs.&lt;/p&gt;

&lt;h2 id=&quot;short-version&quot;&gt;Short version&lt;/h2&gt;

&lt;p&gt;The giant asset page is here : &lt;a href=&quot;http://bdavidxyz.github.io/yourown-bootstrap4/all.html&quot;&gt;http://bdavidxyz.github.io/yourown-bootstrap4/all.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;long-version&quot;&gt;Long version&lt;/h2&gt;

&lt;p&gt;I’m creating your &lt;a href=&quot;https://github.com/bdavidxyz/yourown-bootstrap4&quot;&gt;yourown-bootstrap4&lt;/a&gt;, an work-in-progress open-source project that will allow you to create your own bootstrap 4 theme “the right way” : it will give you a fast local workflow, an optimised, fast rendering once in production, a good documentation so that will focus on design, not technical details. And, finally, a way to visually check how your whole bootstrap distribution will look like : a big collection of all visual elements, extracted from Bootstrap 4 docs, that cover every corner cases.&lt;/p&gt;

&lt;p&gt;You can also think about it as an automatic style guide for your own theme.&lt;/p&gt;

&lt;p&gt;This task is done, even if the whole job is not.&lt;/p&gt;

&lt;p&gt;I presume the impatients will be happy to see what the new Bootstrap will look like.&lt;/p&gt;

&lt;p&gt;I know there is already the official Bootstrap 4 docs that show all elements, but&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They are dispatched into multiples pages, if you want to quickly see all the assets it takes too much time,&lt;/li&gt;
  &lt;li&gt;Visual elements are blurred by &lt;em&gt;stuffs&lt;/em&gt;. Docs are here to show you everything, visual elements yes, but also code, explanations, warnings, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, here is &lt;a href=&quot;http://bdavidxyz.github.io/yourown-bootstrap4/all.html&quot;&gt;the whole page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don’t expect a bunch of new spectacular visual components. There are some good new things of course, but the huge gap compared to Bootstrap 3 relies in the underlying code, which is now extremely easier and pleasant to use. This is the topic for another article I presume.&lt;/p&gt;

&lt;p&gt;For Bootstrap 3 the job has been done many times, see &lt;a href=&quot;http://stackoverflow.com/questions/15233089/is-there-a-giant-asset-page-of-all-bootstrap-elements-that-i-can-re-style&quot;&gt;this Stackoverflow question&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are no comments (yet) on this website, maybe the next time :)&lt;/p&gt;

&lt;p&gt;Enjoy !&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class=&quot;u-htube u-htube--center&quot;&gt;
  &lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What &lt;a href=&quot;https://twitter.com/hashtag/Bootstrap?src=hash&quot;&gt;#Bootstrap&lt;/a&gt; 4 looks like &lt;a href=&quot;https://t.co/WY4D2hQNNv&quot;&gt;https://t.co/WY4D2hQNNv&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/css?src=hash&quot;&gt;#css&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/webdesign?src=hash&quot;&gt;#webdesign&lt;/a&gt;&lt;/p&gt;&amp;mdash; David Boureau (@bdavidxyz) &lt;a href=&quot;https://twitter.com/bdavidxyz/status/745917309747924992&quot;&gt;June 23, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 23 Jun 2016 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/what-bootstrap4-looks-like/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/what-bootstrap4-looks-like/</guid>
        
        
        <category>css</category>
        
      </item>
    
      <item>
        <title>How to name css classes</title>
        <description>&lt;p&gt;Based on my favorite articles on the topic, and recent work experience, here are my 2 cents about how to properly name CSS classes.&lt;/p&gt;

&lt;h2 id=&quot;0-before-to-think-about-class-name-choose-a-good-name-for-html-elements&quot;&gt;0. Before to think about class name, choose a good name for HTML elements&lt;/h2&gt;

&lt;p&gt;If it’s an input, use the &lt;em&gt;input&lt;/em&gt; element.&lt;/p&gt;

&lt;p&gt;It will be far easier for the reader to scan the HTML document.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'submit'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Wooot ? --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'submit'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Ah, ok --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt; : &lt;a href=&quot;https://blog.goetter.fr/2014/11/10/bien-utiliser-un-framework-css/&quot;&gt;Raphael Goetter (french article)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-put-the-class-name-at-the-lowest-possible-level&quot;&gt;1. Put the class name at the lowest possible level&lt;/h2&gt;

&lt;p&gt;It impacts how classes will be named. Always use the class name directly on the HTML element you want to style, even if seems to cost an extra effort.
Check the article of Chris Coyer below if it is not clear why.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;main&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'mainly'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- I'd like to style this paragraph--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.mainly&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* DON'T DO THIS */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/* Instead, assign a class name to p : &amp;lt;p class='paragraphly' /&amp;gt; */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.paragraphly&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt; :  &lt;a href=&quot;https://css-tricks.com/strategies-keeping-css-specificity-low/#article-header-id-3&quot;&gt;Chris Coyer&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-use-content-to-find-a-name&quot;&gt;2. Use content to find a name&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.c-header-logo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Just by reading the name, I guess this selector targets the logo of the header. */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt; : &lt;a href=&quot;http://www.phpied.com/css-coding-conventions/&quot;&gt;phpied.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-dont-use-content-if-the-picture-speaks-louder&quot;&gt;3. Don’t use content, if the picture speaks louder&lt;/h2&gt;

&lt;p&gt;Let’s say the header logo actually looks like this :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/toutuncafe/image/upload/c_scale,h_74,w_139/v1463738189/guillotine_cgxbrd.png&quot; alt=&quot;Guillotine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then don’t call it header-logo.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.guillotine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Oh, I see what we are trying to style */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;4-try--like-suffix-for-better-reuse&quot;&gt;4. Try &lt;em&gt;-like&lt;/em&gt; suffix for better reuse.&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.h3-like&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* some styling */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'h3-title'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--I am NOT an h3 title, but since designer asked me to look the same,
      I can't complain about my classname--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt; :  &lt;a href=&quot;http://bit.ly/27GQhS6&quot;&gt;KNACSS v4&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-dont-use-camelcase&quot;&gt;5. Don’t use camelCase&lt;/h2&gt;

&lt;p&gt;It makes things harder to read.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.navToOneModuleICreated&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* versus */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.nav-to-one-module-i-created&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Source :&lt;/strong&gt; &lt;a href=&quot;http://csswizardry.com/2010/12/css-camel-case-seriously-sucks/&quot;&gt;Harry Roberts&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;6-try-bem&quot;&gt;6. Try BEM&lt;/h2&gt;

&lt;p&gt;It’s one of the most commonly used convention by now.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It looks really weird as first glance, don’t be afraid&lt;/li&gt;
  &lt;li&gt;The entry cost is extremely low&lt;/li&gt;
  &lt;li&gt;You can try it now on any part of existing project&lt;/li&gt;
  &lt;li&gt;Long term benefits are huge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(double dash) means variation of the element.
(double underscore) means children of the element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'btn btn--warning'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- .btn--warning one of the variation of .btn--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn__text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- .btn__text one of the child of .btn--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.btn--warning&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* Yay ! By convention, I know that code here relate to the variation &quot;warning&quot; of a button, without event looking at the HMTL code. What a relief !*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.btn__text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* For same reason, I know that this style will target text in a button */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt; :  &lt;a href=&quot;http://blog.kaelig.fr/post/48196348743/fifty-shades-of-bem&quot;&gt;Kaelig,  fifty shades of BEM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended&lt;/strong&gt; :  &lt;a href=&quot;https://www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them/&quot;&gt;Smashing Magazine, Battling BEM&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;7-try-more-uglier&quot;&gt;7. Try more uglier&lt;/h2&gt;

&lt;p&gt;BEM opens new possibilities, even if their conventions looks icky at first glance.&lt;/p&gt;

&lt;p&gt;But very unusual also means that the eye can quickly grab what is actually happening and where, and for BEM, believe me, it works.&lt;/p&gt;

&lt;p&gt;Now you can try more icky convention, as long as you stick to it the whole project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.DIMENSIONS_OF_mycomponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Ickier is almost impossible. But now it is more clear what it is about.*/&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* I used it for SASS placeholder.*/&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Don't abuse of this rule, though.*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;8-use-fully-descriptive-words&quot;&gt;8. Use fully descriptive words&lt;/h2&gt;

&lt;p&gt;Apart from big classics like nav, txt, url… you should avoid any abbreviation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt; : &lt;a href=&quot;http://www.phpied.com/css-coding-conventions/&quot;&gt;phpied.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;9-try-to-use-only-one-letter-as-a-meaningful-prefix&quot;&gt;9. Try to use only one letter as a meaningful prefix&lt;/h2&gt;

&lt;p&gt;If it’s a visual component, start with c-
If it’s an object (like layout), start with o-
I just love this trick from Harry Roberts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'o-layout'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'o-layout-item o-grid c-button'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- When scanning HTML, the eye can quickly differentiate who does what--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt; : &lt;a href=&quot;http://csswizardry.com/2015/08/bemit-taking-the-bem-naming-convention-a-step-further/&quot;&gt;Harry Roberts&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;10-try--when-too-many-classes-of-a-kind&quot;&gt;10. Try [] when too many classes of a kind&lt;/h2&gt;

&lt;p&gt;This little trick allows you to scan HTML quicker.
Notice the classes .[ and .] do not exists in your CSS files, it is only here to help others to read your HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[ o-layout ]'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[ o-layout-item o-layout-item--first ] c-button'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- When scanning HTML, the eye can quickly differentiate who does what--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt; : &lt;a href=&quot;https://raw.githubusercontent.com/csshugs/inuit-kitchen-sink/v0.4.0/layout.html&quot;&gt;Source code of Inuit Kitchen Sink&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;11-use-a-js--prefix-if-it-is-only-used-by-javascript&quot;&gt;11. Use a js- prefix if it is only used by JavaScript&lt;/h2&gt;

&lt;p&gt;If Javascript needs to target an element, don’t make it rely on CSS style.
Give a dedicated prefix, like js-.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'js-click-me'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- When scanning HTML, I understand that this button has no CSS selector to design it.
       But, JavaScript will use it, probably to catch some event.--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Source :&lt;/strong&gt; &lt;a href=&quot;https://leanpub.com/marionette-gentle-introduction&quot;&gt;Derick Bailey, marion
netteJS book&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;12-try-to-separate-parent-from-children&quot;&gt;12. Try to separate parent from children&lt;/h2&gt;

&lt;p&gt;If a class has to many responsibilities, split it into 2 separated properties.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(bad)&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This class below will contain a mix of properties
       some concerned by a-b relationship
       some concerned by b-c relationship
       CSS file is going to be hard to read--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'child-of-a-and-parent-of-c'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(good)&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Split into 2 classes--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'child-of-a parent-of-c'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;13-unsemantic-classes-should-explicitly-describe-their-properties&quot;&gt;13. Unsemantic classes should explicitly describe their properties&lt;/h2&gt;

&lt;p&gt;Most of them contain only one property, there are no value in hiding what that is.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nc&quot;&gt;.horizontal-alignment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Don't do this. Horizontal alignment can be achieved in many ways, when scanning this selector in HTML file, we have no clue about HOW it is achieved. */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/* Prefer this one. Using BEM, and a one-character prefix, see above */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.u-text-align--center&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;14-explicit-hacks-i&quot;&gt;14. Explicit hacks (I)&lt;/h2&gt;

&lt;p&gt;If you’re not happy with your CSS selector, say it to everybody.&lt;/p&gt;

&lt;p&gt;It will happen anyway, even to the best CSSuper(wo)men, so don’t be ashamed of it.&lt;/p&gt;

&lt;p&gt;In your team, find a word that will be used for such cases, document it, and stick to it all along the lifetime of your project.&lt;/p&gt;

&lt;p&gt;For us, Atom IDE automatically highlight the word “HACK” so I used it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nc&quot;&gt;.my-component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-7px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* HACK here : magic number, here to compensate gutter */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;15-explicit-hacks-ii&quot;&gt;15. Explicit hacks (II)&lt;/h2&gt;

&lt;p&gt;Another valuable option is to put every weird code into a dedicated file, named &lt;strong&gt;shame.css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Again, Harry Roberts come to the rescue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source :&lt;/strong&gt; &lt;a href=&quot;http://csswizardry.com/2013/04/shame-css/&quot;&gt;Harry Roberts&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;16-try-to-avoid-more-than-two-words-for-a-given-name&quot;&gt;16. Try to avoid more than two words for a given name&lt;/h2&gt;

&lt;p&gt;The name must be self-descriptive in one or two words, or code will be hard to maintain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* OK */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.dropdown-button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* still OK */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.dropdown-button-part-one&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Hmm, still ok, but will be unredable when adding children, for ex : */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.dropdown-button-part-one__button-admin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Yikes !!! */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;17-use-data-state-attribute-to-specify-state-of-your-component&quot;&gt;17. Use data-state attribute to specify state of your component&lt;/h2&gt;

&lt;p&gt;State manipulation happens very often.
It happens so frequently that give the state a dedicated attribute saves times and effort over the long term.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c-button c-button--warning is-active'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Don't do this--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c-button c-button--warning'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-state=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'is-active'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- That's better.
  I removed a class declaration,
  it enforces the one-state-rule,
  and for those who use Sass, it makes code cleaner.--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Source :&lt;/strong&gt; Unfortunately, I can’t remember who wrote about this, but his advice was very helpful.&lt;/p&gt;

&lt;h2 id=&quot;18-use-has--or-is--prefix-for-the-state&quot;&gt;18. Use has- or is- prefix for the state&lt;/h2&gt;

&lt;p&gt;State manipulation happens very often. (bis)
So adhere to a strict naming convention for the state will be very helpful&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.activated&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Don't do this.  I'm not quite sure what you are talking about ?*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.is-activated&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* Yes, you're styling a state. */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Source :&lt;/strong&gt; &lt;a href=&quot;https://github.com/mobify/mobify-code-style/tree/master/css/class-naming-conventions#state&quot;&gt;Mobify code style&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;19-use-a-dash-as-a-prefix-when-combining-multiple-state&quot;&gt;19. Use a dash as a prefix when combining multiple state&lt;/h2&gt;

&lt;p&gt;You should do everything you can to avoid state combination.
But, when it is not possible, you can use this very helpful trick from Ben Smithett.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn -color-red -size-large -shape-round&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Source :&lt;/strong&gt; &lt;a href=&quot;https://www.bensmithett.com/bem-modifiers-multiple-classes-vs-extend/&quot;&gt;Ben Smithett&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;20-try-single-quote-instead-of-double-quote-when-declaring-selector-in-html&quot;&gt;20. Try single quote instead of double quote when declaring selector in HTML&lt;/h2&gt;

&lt;p&gt;It reduces noise a lot when reading the document.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-button&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- BAD EXAMPLE : it uses &quot; instead of '. Not a big deal on this tiny example, but when you deal with hundreds of selector in a HTML file, single quote is a better idea.--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c-button'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Good !--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Source :&lt;/strong&gt; I learned it when I worked with the &lt;a href=&quot;http://www.predicsis.com/team/&quot;&gt;Predicsis team&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;21-dont-follow-rules&quot;&gt;21. Don’t follow rules&lt;/h2&gt;

&lt;p&gt;I tried to give you some guidelines based on my own experience, and articles that helped me the most.&lt;/p&gt;

&lt;p&gt;I doesn’t mean everything will work for you, so my best advice is :&lt;/p&gt;

&lt;p&gt;1) Try to improve your naming,
2) keep it consistent for a given project,
3) but avoid over-engineering.&lt;/p&gt;

&lt;p&gt;If you don’t feel comfortable, just skip it.&lt;/p&gt;

&lt;p&gt;Enjoy !&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Special thanks to &lt;a href=&quot;https://twitter.com/HugoGiraudel&quot;&gt;@HugoGiraudel&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/kaelig&quot;&gt;@kaelig&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/gaetanbt&quot;&gt;@gaetanbt&lt;/a&gt; for their reviews&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 18 May 2016 00:00:00 +0200</pubDate>
        <link>http://bdavidxyz.com/blog/how-to-name-css-classes/</link>
        <guid isPermaLink="true">http://bdavidxyz.com/blog/how-to-name-css-classes/</guid>
        
        
        <category>css</category>
        
      </item>
    
  </channel>
</rss>
